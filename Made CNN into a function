{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/faithrts/COMP-551/blob/GaryBranch/Made%20CNN%20into%20a%20function\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Set-up"
      ],
      "metadata": {
        "id": "8A1SE2icjh69"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "VCTCTWgB-NKG"
      },
      "outputs": [],
      "source": [
        "### importing libraries and setting the random seed\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import sys\n",
        "\n",
        "%matplotlib notebook\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.gridspec as gridspec\n",
        "#from matplotlib import cm\n",
        "\n",
        "import re\n",
        "import cv2\n",
        "import math\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras import layers, models, optimizers\n",
        "from keras.datasets import mnist\n",
        "from importlib import reload\n",
        "from typing import List\n",
        "from tqdm import tqdm\n",
        "from enum import Enum\n",
        "from numpy.random import RandomState\n",
        "\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "np.random.seed(1234)\n",
        "random_state = RandomState(1234)\n",
        "\n",
        "# a folder to store the saved graphs\n",
        "!mkdir images"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Handling"
      ],
      "metadata": {
        "id": "hKHZWj9vjn1j"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Helper functions"
      ],
      "metadata": {
        "id": "MtAHDLEXj2T3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Loading and cleaning data"
      ],
      "metadata": {
        "id": "8rHPqW8GC1E6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# assumes the last column of the dataframe is the labels\n",
        "def x_y_from_df(df):\n",
        "  x = df.iloc[:, :-1].to_numpy()\n",
        "  y = df.iloc[:, -1].to_numpy()\n",
        "\n",
        "  return x, y"
      ],
      "metadata": {
        "id": "2V6syl07WULR"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def center_array(arr):\n",
        "  mean = np.mean(arr)\n",
        "  return_arr = np.array(arr) - mean\n",
        "  # return_arr = [item - mean for item in arr]\n",
        "\n",
        "  return return_arr"
      ],
      "metadata": {
        "id": "vudEuApQoTk7"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def normalize_array(arr):\n",
        "  std = np.std(arr)\n",
        "  return_arr = np.array(arr) / std\n",
        "  # return_arr = [item / std for item in arr]\n",
        "\n",
        "  return return_arr"
      ],
      "metadata": {
        "id": "uWuzGFZrpHxK"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def normalize_greyscale_array(arr):\n",
        "  # the min and max pixel greyscale values\n",
        "  min = 0\n",
        "  max = 255\n",
        "\n",
        "  return np.array(arr - min) / max - min"
      ],
      "metadata": {
        "id": "-Qc-lUOE-yB7"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# pre-processes the df by performing mean subtraction and normalization\n",
        "def preprocess_df(df):\n",
        "  preprocessed_df = df.copy()\n",
        "\n",
        "  for col in preprocessed_df.iloc[:, :-1]:\n",
        "    preprocessed_col = normalize_array(center_array(df[col]))\n",
        "    preprocessed_df[col] = preprocessed_col\n",
        "\n",
        "  return preprocessed_df"
      ],
      "metadata": {
        "id": "9XtP7FZtn6mN"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def preprocess_greyscale_df(df):\n",
        "  preprocessed_df = df.copy()\n",
        "\n",
        "  for col in preprocessed_df.iloc[:, :-1]:\n",
        "    preprocessed_col = normalize_greyscale_array(center_array(df[col]))\n",
        "    preprocessed_df[col] = preprocessed_col\n",
        "\n",
        "  return preprocessed_df"
      ],
      "metadata": {
        "id": "euQ4kSY5_ieV"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# pre-processes the df by performing mean subtraction\n",
        "def preprocess_no_normalization_df(df):\n",
        "  preprocessed_df = df.copy()\n",
        "\n",
        "  for col in preprocessed_df.iloc[:, :-1]:\n",
        "    preprocessed_col = center_array(df[col])\n",
        "    preprocessed_df[col] = preprocessed_col\n",
        "\n",
        "  return preprocessed_df"
      ],
      "metadata": {
        "id": "MDvEhngMdlR0"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Plotting graphs"
      ],
      "metadata": {
        "id": "sx9mADR8DD8L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_label_distributions(label_arr, dataset_name, labels = 0):\n",
        "  \n",
        "  # creates the plot\n",
        "  plt.figure(figsize = (10,4))\n",
        "  width = 0.6\n",
        "\n",
        "  unique_labels = list(set(label_arr))\n",
        "  counts = []\n",
        "\n",
        "  for label in unique_labels:\n",
        "    count = label_arr.count(label)\n",
        "    counts.append(count)\n",
        "\n",
        "  if labels == 0:\n",
        "    labels = [str(label) for label in unique_labels]\n",
        "\n",
        "  # the colour codes of the bars\n",
        "  colours = ['#001219', '#005f73', '#0a9396', '#94d2bd', '#e9d8a6',\n",
        "            '#ee9b00', '#ca6702', '#bb3e03', '#ae2012', '#9b2226']\n",
        "\n",
        "  plt.bar(labels, counts, width, color = colours)\n",
        "  plt.title(\"Distribution of Class Labels in \" + dataset_name + \" Dataset\")\n",
        "  plt.xlabel(\"Label\")\n",
        "  plt.ylabel(\"Count\")\n",
        "\n",
        "  for index, value in enumerate(counts):\n",
        "    plt.text(index - 0.24, value + 5, str(round(value, 2)))\n",
        "\n",
        "  plt.show()"
      ],
      "metadata": {
        "id": "G-UXPNHRww-f"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Importing"
      ],
      "metadata": {
        "id": "FsaKjKTqjylr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# clones the github repo\n",
        "!git clone https://github.com/zalandoresearch/fashion-mnist\n",
        "sys.path.insert(1, 'fashion-mnist/utils')\n",
        "\n",
        "# imports the mnist reader from the repo\n",
        "import mnist_reader"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JDX1OBJ7jUl8",
        "outputId": "232c5e79-b4bf-41ea-b594-d44f9b64db7c"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Cloning into 'fashion-mnist'...\n",
            "remote: Enumerating objects: 762, done.\u001b[K\n",
            "remote: Counting objects: 100% (4/4), done.\u001b[K\n",
            "remote: Compressing objects: 100% (4/4), done.\u001b[K\n",
            "remote: Total 762 (delta 0), reused 3 (delta 0), pack-reused 758\u001b[K\n",
            "Receiving objects: 100% (762/762), 105.85 MiB | 8.52 MiB/s, done.\n",
            "Resolving deltas: 100% (444/444), done.\n",
            "Checking out files: 100% (51/51), done.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Loading and cleaning data"
      ],
      "metadata": {
        "id": "HQbCrZx0-EgM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### loading the data using the github repo's mnist_reader.load_mnist\n",
        "\n",
        "labels = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n",
        "          'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n",
        "\n",
        "# training data\n",
        "x_train_temp, y_train = mnist_reader.load_mnist('fashion-mnist/data/fashion', kind = 'train')\n",
        "\n",
        "# testing data\n",
        "x_test_temp, y_test = mnist_reader.load_mnist('fashion-mnist/data/fashion', kind = 't10k')"
      ],
      "metadata": {
        "id": "kZITIsTPkA3M"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### creating dataframes to better understand data\n",
        "\n",
        "# training dataframe\n",
        "train_temp_df = pd.DataFrame(x_train_temp)\n",
        "train_temp_df['LABEL'] = y_train\n",
        "\n",
        "# testing dataframe\n",
        "test_temp_df = pd.DataFrame(x_test_temp)\n",
        "test_temp_df['LABEL'] = y_test"
      ],
      "metadata": {
        "id": "PgtXdMOXkxwK"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_temp_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "ZkQzG8t8l5xp",
        "outputId": "6d957b8e-f312-464b-82f5-b1d6becd1840"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       0  1  2  3  4  5  6  7   8   9  ...  775  776  777  778  779  780  781  \\\n",
              "0      0  0  0  0  0  0  0  0   0   0  ...    0    0    0    0    0    0    0   \n",
              "1      0  0  0  0  0  1  0  0   0   0  ...  114  130   76    0    0    0    0   \n",
              "2      0  0  0  0  0  0  0  0   0  22  ...    0    1    0    0    0    0    0   \n",
              "3      0  0  0  0  0  0  0  0  33  96  ...    0    0    0    0    0    0    0   \n",
              "4      0  0  0  0  0  0  0  0   0   0  ...    0    0    0    0    0    0    0   \n",
              "...   .. .. .. .. .. .. .. ..  ..  ..  ...  ...  ...  ...  ...  ...  ...  ...   \n",
              "59995  0  0  0  0  0  0  0  0   0   0  ...    0    0    0    0    0    0    0   \n",
              "59996  0  0  0  0  0  0  0  0   0   0  ...    0    0    0    0    0    0    0   \n",
              "59997  0  0  0  0  0  0  0  0   0   5  ...    0    0    0    0    0    0    0   \n",
              "59998  0  0  0  0  0  0  0  0   0   0  ...   54   50    5    0    1    0    0   \n",
              "59999  0  0  0  0  0  0  0  0   0   0  ...    0    0    0    0    0    0    0   \n",
              "\n",
              "       782  783  LABEL  \n",
              "0        0    0      9  \n",
              "1        0    0      0  \n",
              "2        0    0      0  \n",
              "3        0    0      3  \n",
              "4        0    0      0  \n",
              "...    ...  ...    ...  \n",
              "59995    0    0      5  \n",
              "59996    0    0      1  \n",
              "59997    0    0      3  \n",
              "59998    0    0      0  \n",
              "59999    0    0      5  \n",
              "\n",
              "[60000 rows x 785 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5691f990-e523-4d7c-b2f2-7a5da582d235\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>775</th>\n",
              "      <th>776</th>\n",
              "      <th>777</th>\n",
              "      <th>778</th>\n",
              "      <th>779</th>\n",
              "      <th>780</th>\n",
              "      <th>781</th>\n",
              "      <th>782</th>\n",
              "      <th>783</th>\n",
              "      <th>LABEL</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>114</td>\n",
              "      <td>130</td>\n",
              "      <td>76</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>22</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>33</td>\n",
              "      <td>96</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59995</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59996</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59997</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59998</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>54</td>\n",
              "      <td>50</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59999</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>60000 rows × 785 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5691f990-e523-4d7c-b2f2-7a5da582d235')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-5691f990-e523-4d7c-b2f2-7a5da582d235 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-5691f990-e523-4d7c-b2f2-7a5da582d235');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### centering and normalizing the data\n",
        "\n",
        "# pre-processing each dataframe\n",
        "train_df = preprocess_df(train_temp_df)\n",
        "test_df = preprocess_df(test_temp_df)\n",
        "\n",
        "# extracting arrays for x_train, y_train, x_test, y_test\n",
        "x_train, y_train = x_y_from_df(train_df)\n",
        "x_test, y_test = x_y_from_df(test_df)"
      ],
      "metadata": {
        "id": "aCWhRpennWnd"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### saving a copy of the un-preprocessed (centered and normalized) data\n",
        "\n",
        "x_train_unprocessed, _ = x_y_from_df(train_temp_df)\n",
        "x_test_unprocessed, _ = x_y_from_df(test_temp_df)"
      ],
      "metadata": {
        "id": "n0vemftld2Ja"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### saving a copy of the data normalized based on the pixel greyscale values\n",
        "\n",
        "# pre-processing each dataframe\n",
        "train_greyscale_df = preprocess_greyscale_df(train_temp_df)\n",
        "test_greyscale_df = preprocess_greyscale_df(test_temp_df)\n",
        "\n",
        "x_train_greyscale, y_train_greyscale = x_y_from_df(train_greyscale_df)\n",
        "x_test_greyscale, y_test_greyscale = x_y_from_df(test_greyscale_df)"
      ],
      "metadata": {
        "id": "7XDsp3n9_zaQ"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### saving a copy of the data reshaped into images for the convnet\n",
        "\n",
        "# reshapes the arrays into image format (28 x 28 pixels)\n",
        "x_train_convnet = np.reshape(x_train, (60000, 28, 28, 1))\n",
        "x_test_convnet = np.reshape(x_train, (60000, 28, 28, 1))\n",
        "\n",
        "y_train_convnet = tf.keras.utils.to_categorical(y_train)\n",
        "y_test_convnet = tf.keras.utils.to_categorical(y_test)"
      ],
      "metadata": {
        "id": "ZoLHrbjOIlSC"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        },
        "id": "_S73o8ans37S",
        "outputId": "e6dc3c59-fa25-4cf9-9900-dab439f1d03f"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              0         1         2         3         4         5         6  \\\n",
              "0     -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "1     -0.008644 -0.023223 -0.039178 -0.041322 -0.057646  0.100437 -0.098878   \n",
              "2     -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "3     -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "4     -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "...         ...       ...       ...       ...       ...       ...       ...   \n",
              "59995 -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "59996 -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "59997 -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "59998 -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "59999 -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "\n",
              "              7         8         9  ...       775       776       777  \\\n",
              "0     -0.156653 -0.239080 -0.377827  ... -0.474798 -0.394260 -0.406094   \n",
              "1     -0.156653 -0.239080 -0.377827  ...  1.857395  2.697741  1.324682   \n",
              "2     -0.156653 -0.239080  0.198023  ... -0.474798 -0.370475 -0.406094   \n",
              "3     -0.156653  1.145393  2.134974  ... -0.474798 -0.394260 -0.406094   \n",
              "4     -0.156653 -0.239080 -0.377827  ... -0.474798 -0.394260 -0.406094   \n",
              "...         ...       ...       ...  ...       ...       ...       ...   \n",
              "59995 -0.156653 -0.239080 -0.377827  ... -0.474798 -0.394260 -0.406094   \n",
              "59996 -0.156653 -0.239080 -0.377827  ... -0.474798 -0.394260 -0.406094   \n",
              "59997 -0.156653 -0.239080 -0.246952  ... -0.474798 -0.394260 -0.406094   \n",
              "59998 -0.156653 -0.239080 -0.377827  ...  0.629925  0.794971 -0.292227   \n",
              "59999 -0.156653 -0.239080 -0.377827  ... -0.474798 -0.394260 -0.406094   \n",
              "\n",
              "            778       779       780       781       782       783  LABEL  \n",
              "0     -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      9  \n",
              "1     -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      0  \n",
              "2     -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      0  \n",
              "3     -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      3  \n",
              "4     -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      0  \n",
              "...         ...       ...       ...       ...       ...       ...    ...  \n",
              "59995 -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      5  \n",
              "59996 -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      1  \n",
              "59997 -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      3  \n",
              "59998 -0.441358 -0.374489 -0.288156 -0.156811 -0.089673 -0.034147      0  \n",
              "59999 -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      5  \n",
              "\n",
              "[60000 rows x 785 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ae5eeb56-dafb-43b6-9e66-ebf93b8ff5ee\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>775</th>\n",
              "      <th>776</th>\n",
              "      <th>777</th>\n",
              "      <th>778</th>\n",
              "      <th>779</th>\n",
              "      <th>780</th>\n",
              "      <th>781</th>\n",
              "      <th>782</th>\n",
              "      <th>783</th>\n",
              "      <th>LABEL</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>0.100437</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>1.857395</td>\n",
              "      <td>2.697741</td>\n",
              "      <td>1.324682</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>0.198023</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.370475</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>1.145393</td>\n",
              "      <td>2.134974</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59995</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59996</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59997</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.246952</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59998</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>0.629925</td>\n",
              "      <td>0.794971</td>\n",
              "      <td>-0.292227</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.374489</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59999</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>60000 rows × 785 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae5eeb56-dafb-43b6-9e66-ebf93b8ff5ee')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-ae5eeb56-dafb-43b6-9e66-ebf93b8ff5ee button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-ae5eeb56-dafb-43b6-9e66-ebf93b8ff5ee');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# plotting label distributions for training data\n",
        "plot_label_distributions(train_df['LABEL'].tolist(), 'MNIST Fashion (train)', labels)"
      ],
      "metadata": {
        "id": "7Z1sA2Iu0MYp",
        "outputId": "5db1f2e6-88e3-4e19-d61a-817349c9f62a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# plotting label distributions for testing data\n",
        "plot_label_distributions(test_df['LABEL'].tolist(), 'MNIST Fashion (test)', labels)"
      ],
      "metadata": {
        "id": "5uB2ZBXO2E2q",
        "outputId": "7114124f-5864-45a6-d5fb-fc701e7ce285",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 0
        }
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Implementing models"
      ],
      "metadata": {
        "id": "a6lVueablnwe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Helper functions"
      ],
      "metadata": {
        "id": "U_WEPKULlIU2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Layers"
      ],
      "metadata": {
        "id": "-7B0imbhlxBQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class NeuralNetLayer:\n",
        "  def __init__(self):\n",
        "    self.gradient = None\n",
        "    self.parameters = None\n",
        "        \n",
        "  def forward(self, x):\n",
        "    raise NotImplementedError\n",
        "\n",
        "  def backward(self, gradient):\n",
        "    raise NotImplementedError"
      ],
      "metadata": {
        "id": "6G7qW7K8kaeL"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class LinearLayer(NeuralNetLayer):\n",
        "  def __init__(self, input_size, output_size):\n",
        "    super().__init__()\n",
        "    self.ni = input_size\n",
        "    self.no = output_size\n",
        "\n",
        "    sigma = 0.1\n",
        "    self.w = sigma * random_state.randn(output_size, input_size)\n",
        "    self.b = sigma * random_state.randn(output_size)\n",
        "    self.cur_input = None\n",
        "    self.parameters = [self.w, self.b]\n",
        "\n",
        "  # x is the data inputted into this layer during predictions;\n",
        "  # unless this is the input layer, x is the original data inputted\n",
        "  # into the model, but transformed by the preceding layers\n",
        "  def forward(self, x):\n",
        "    self.cur_input = x\n",
        "    return (self.w[None, :, :] @ x[:, :, None]).squeeze() + self.b\n",
        "\n",
        "  def backward(self, gradient):\n",
        "    assert self.cur_input is not None, \"Must call forward before backward\"\n",
        "    #dw = gradient.dot(self.cur_input)\n",
        "    dw = gradient[:, :, None] @ self.cur_input[:, None, :]\n",
        "    db = gradient\n",
        "    self.gradient = [dw, db]\n",
        "    return gradient.dot(self.w)"
      ],
      "metadata": {
        "id": "fLT6hDvqlnWn"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class ReLULayer(NeuralNetLayer):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "        \n",
        "  def forward(self, x):\n",
        "    self.gradient = np.where(x > 0, 1.0, 0.0)\n",
        "\n",
        "    activated_x = np.maximum(0, x)\n",
        "    return activated_x\n",
        "\n",
        "  def backward(self, gradient):\n",
        "    assert self.gradient is not None, \"Must call forward before backward\"\n",
        "    return gradient * self.gradient"
      ],
      "metadata": {
        "id": "nh2uqaBzltSL"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class LeakyReLULayer(NeuralNetLayer):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "        \n",
        "  def forward(self, x):\n",
        "    self.gradient = np.where(x > 0, 1.0, 0.01)\n",
        "\n",
        "    # activated_x = [[float(element) if element > 0 else float(element) * 0.01 for element in sublist] for sublist in x]\n",
        "    activated_x = np.maximum(0.01 * x, x)\n",
        "    return activated_x\n",
        "\n",
        "  def backward(self, gradient):\n",
        "    assert self.gradient is not None, \"Must call forward before backward\"\n",
        "    return gradient * self.gradient"
      ],
      "metadata": {
        "id": "dXZNK6cj0OpR"
      },
      "execution_count": 24,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class TanhLayer(NeuralNetLayer):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "        \n",
        "  def forward(self, x):\n",
        "    self.gradient = 1 - (np.tanh(x) ** 2)\n",
        "\n",
        "    activated_x = np.tanh(x)\n",
        "    return activated_x\n",
        "\n",
        "  def backward(self, gradient):\n",
        "    assert self.gradient is not None, \"Must call forward before backward\"\n",
        "    return gradient * self.gradient"
      ],
      "metadata": {
        "id": "_Q3WODEGvX9T"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class SoftmaxOutputLayer(NeuralNetLayer):\n",
        "  def __init__(self):\n",
        "    super().__init__()\n",
        "    self.cur_probs = None\n",
        "\n",
        "  def forward(self, x):\n",
        "    exps = np.exp(x)\n",
        "    probs = exps / np.sum(exps, axis=-1)[:, None]\n",
        "    #print(probs)\n",
        "    self.cur_probs = probs\n",
        "    return probs\n",
        "\n",
        "  def backward(self, target):\n",
        "    assert self.cur_probs is not None, \"Must call forward before backward\"\n",
        "    return self.cur_probs - target"
      ],
      "metadata": {
        "id": "H5KJfNG-l3Vq"
      },
      "execution_count": 26,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## MLP"
      ],
      "metadata": {
        "id": "5o7wc6mXO2TM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class MLP:\n",
        "  def __init__(self, n_features, n_output, hidden_layers = 0, hidden_units = [0], activation_func = \"None\"):\n",
        "    layers_list = []\n",
        "\n",
        "    # adds the input layer\n",
        "    if hidden_layers == 0:\n",
        "      layers_list.append(LinearLayer(n_features, n_output))\n",
        "    else:\n",
        "      layers_list.append(LinearLayer(n_features, hidden_units[0]))\n",
        "\n",
        "    # adds the hidden layers\n",
        "    for i in range(hidden_layers):\n",
        "\n",
        "      # adds activation function layers\n",
        "      if activation_func.upper() == \"RELU\":\n",
        "        layers_list.append(ReLULayer())\n",
        "      elif activation_func.upper() == \"TANH\":\n",
        "        layers_list.append(TanhLayer())\n",
        "      elif activation_func.upper() == \"LEAKY RELU\":\n",
        "        layers_list.append(LeakyReLULayer())\n",
        "\n",
        "      # if this is the last hidden layer, it outputs the output size\n",
        "      if i == hidden_layers - 1:\n",
        "        layers_list.append(LinearLayer(hidden_units[i], n_output))\n",
        "        continue\n",
        "          \n",
        "      # if this is not the last hidden layer, it outputs the hidden size\n",
        "      layers_list.append(LinearLayer(hidden_units[i], hidden_units[i + 1]))\n",
        "          \n",
        "    # adds the output layer\n",
        "    layers_list.append(SoftmaxOutputLayer())\n",
        "\n",
        "    self.layers = layers_list\n",
        "\n",
        "  def forward(self, x):\n",
        "    for layer in self.layers:\n",
        "      x = layer.forward(x)\n",
        "    return x\n",
        "\n",
        "  def backward(self, target):\n",
        "    for layer in self.layers[::-1]:\n",
        "      target = layer.backward(target)\n",
        "\n",
        "  def fit(self, x_train, y_train, x_test, y_test, opt, lambda_reg = 0, track_accuracy = False):    \n",
        "    # one-hot encodes the labels\n",
        "    labels_count = len(set(y_train))\n",
        "    labels = np.eye(labels_count)[np.array(y_train)]\n",
        "\n",
        "    loss = 0\n",
        "    train_acc = 0\n",
        "    test_acc = 0\n",
        "\n",
        "    prediction_probs = self.forward(x_train)\n",
        "\n",
        "    # back propagates\n",
        "    self.backward(labels)\n",
        "    opt.step()\n",
        "\n",
        "    # calculates the loss\n",
        "    loss = self.evaluate_loss(prediction_probs, labels, lambda_reg)\n",
        "\n",
        "    ### calculates the training and testing accuracy\n",
        "    if track_accuracy:\n",
        "      # calculates the predicted labels using the current model weights\n",
        "      train_pred = self.predict(x_train)\n",
        "      test_pred = self.predict(x_test)\n",
        "\n",
        "      # evaluates the training and testing accuracy\n",
        "      train_acc = evaluate_acc(train_pred, y_train)\n",
        "      test_acc = evaluate_acc(test_pred, y_test)\n",
        "\n",
        "    # returns the CE loss, training accuracy, and testing accuracy\n",
        "    return loss, train_acc, test_acc\n",
        "\n",
        "  def fit_mini_batch(self, x_train, y_train, x_test, y_test, opt, batch_size, lambda_reg = 0, track_acc = False):    \n",
        "    # one-hot encodes the labels\n",
        "    labels_count = len(set(y_train))\n",
        "    labels = np.eye(labels_count)[np.array(y_train)]\n",
        "\n",
        "    x_train_size = len(x_train)\n",
        "\n",
        "    # the number of instances in each batch\n",
        "    batch_count = int(len(x_train) / batch_size)\n",
        "\n",
        "    # the index at which the current batch starts (updated in the for loop)\n",
        "    start_index = 0\n",
        "\n",
        "    loss = 0\n",
        "    train_acc = 0\n",
        "    test_acc = 0\n",
        "\n",
        "    # updating the model weights for each batch of training data\n",
        "    for i in range(batch_count):\n",
        "\n",
        "      # the index at which the current batch ends\n",
        "      end_index = batch_size * (i + 1)\n",
        "      if(i == batch_count - 1):\n",
        "        # if this is the last batch, take all the training data from start_index to -1\n",
        "        end_index = -1\n",
        "\n",
        "      # isolates the current batch of training data and associated labels\n",
        "      batch = x_train[start_index : end_index]\n",
        "      batch_labels = labels[start_index : end_index]\n",
        "\n",
        "      # updates the start index for the next batch (next iteration in the for loop)\n",
        "      start_index = end_index\n",
        "\n",
        "      # calculates the class predictions\n",
        "      prediction_probs = self.forward(batch)\n",
        "\n",
        "      # back propagates\n",
        "      self.backward(batch_labels)\n",
        "      opt.step(batch_size / x_train_size)\n",
        "\n",
        "    # calculates the loss\n",
        "    prediction_probs = self.forward(x_train)\n",
        "    loss = self.evaluate_loss(prediction_probs, labels, lambda_reg)\n",
        "\n",
        "    if track_acc:\n",
        "      # calculates the training and testing accuracy\n",
        "      train_pred = self.predict(x_train)\n",
        "      test_pred = self.predict(x_test)\n",
        "      \n",
        "      train_acc = evaluate_acc(train_pred, y_train)\n",
        "      test_acc = evaluate_acc(test_pred, y_test)\n",
        "\n",
        "    # returns the CE loss, training accuracy, and testing accuracy\n",
        "    return loss, train_acc, test_acc\n",
        "\n",
        "  def fit_epoch_mini_batch(self, x_train, y_train, x_test, y_test, opt, batch_size, epochs, lambda_reg, track_acc):\n",
        "    losses = []\n",
        "    train_accs = []\n",
        "    test_accs = []\n",
        "\n",
        "    indices = np.arange(0, len(x_train))\n",
        "\n",
        "    for epoch in range(epochs):\n",
        "      random_state.shuffle(indices)\n",
        "      x_train_shuf = x_train[indices]\n",
        "      y_train_shuf = y_train[indices]\n",
        "\n",
        "      loss, train_acc, test_acc = self.fit_mini_batch(x_train_shuf, y_train_shuf, x_test, y_test, opt, batch_size, lambda_reg, track_acc)\n",
        "\n",
        "      # taking the last loss, training accuracy, and testing accuracy values\n",
        "      losses.append(loss)\n",
        "      train_accs.append(train_acc)\n",
        "      test_accs.append(test_acc)\n",
        "    \n",
        "    return losses, train_accs, test_accs\n",
        "\n",
        "  def evaluate_loss(self, prediction_probs, labels, lambda_reg):\n",
        "    # adds regularization term (0 by default)\n",
        "    reg_term = lambda_reg\n",
        "    if lambda_reg != 0:\n",
        "      weights_sum = 0\n",
        "\n",
        "      # iterates through the layers in the model and adds the weights\n",
        "      for layer in self.layers[::-1]:\n",
        "        # if the layer is a LinearLayer, it has weights\n",
        "        if type(layer).__name__ == \"LinearLayer\":\n",
        "          weights_squared = layer.w ** 2\n",
        "          weights_sum += sum(sum(weights_squared))\n",
        "\n",
        "      reg_term = (lambda_reg * weights_sum)\n",
        "\n",
        "    ### calculates the loss, adds it to the losses list, and back propagates based on the loss\n",
        "    loss = -(labels * np.log(prediction_probs)).sum(axis=-1).mean() + reg_term\n",
        "\n",
        "    return loss\n",
        "\n",
        "  def evaluate_initial_metrics(self, x_train, x_test, y_train, y_test, lambda_reg):\n",
        "    # evaluating the CE loss based on the predicted class probabilities\n",
        "    labels_count = len(set(y_train))\n",
        "    labels = np.eye(labels_count)[np.array(y_train)]\n",
        "    prediction_probs = self.forward(x_train)\n",
        "    loss = self.evaluate_loss(prediction_probs, labels, lambda_reg)\n",
        "\n",
        "    # evaluates the training and testing classification accuracy\n",
        "    train_pred = self.predict(x_train)\n",
        "    test_pred = self.predict(x_test)\n",
        "    train_acc = evaluate_acc(train_pred, y_train)\n",
        "    test_acc = evaluate_acc(test_pred, y_test)\n",
        "\n",
        "    return loss, train_acc, test_acc\n",
        "\n",
        "  def predict(self, x):\n",
        "    pred_prob = self.forward(x)\n",
        "    predictions = np.argmax(pred_prob, axis = -1)\n",
        "    return predictions"
      ],
      "metadata": {
        "id": "rnVxRvpFmGO4"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Optimizer:\n",
        "    def __init__(self, net: MLP):\n",
        "        self.net = net\n",
        "\n",
        "    # batch_coef is the number of instances in the batch / training data size\n",
        "    def step(self, batch_coef):\n",
        "        for layer in self.net.layers[::-1]:\n",
        "            if layer.parameters is not None:\n",
        "                self.update(layer.parameters, layer.gradient, batch_coef)\n",
        "\n",
        "    def update(self, params, gradient):\n",
        "        raise NotImplementedError\n",
        "\n",
        "class GradientDescentOptimizer(Optimizer):\n",
        "    def __init__(self, net: MLP, lr: float):\n",
        "        super().__init__(net)\n",
        "        self.lr = lr\n",
        "\n",
        "    def update(self, params, gradient, batch_coef):\n",
        "        for (p, g) in zip(params, gradient):\n",
        "            p -= self.lr * g.mean(axis=0) * batch_coef"
      ],
      "metadata": {
        "id": "E9d9aLMlmQ1o"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Running experiments"
      ],
      "metadata": {
        "id": "IlELJSq3nWUz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Helper functions"
      ],
      "metadata": {
        "id": "0rywH03KE_9-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def evaluate_acc(true_labels, target_labels):\n",
        "  # the number of labels\n",
        "  label_count = true_labels.shape[0]\n",
        "\n",
        "  # the accuracy is the number of correctly labelled instances divided\n",
        "  # by the total number of instances\n",
        "  accuracy = np.sum(target_labels == true_labels) / label_count\n",
        "\n",
        "  return accuracy"
      ],
      "metadata": {
        "id": "bAo7UKZrX5RR"
      },
      "execution_count": 29,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_losses(losses, hidden_layer_count, activation_func):\n",
        "  x_axis = np.arange(1, len(losses) + 1, dtype = int)\n",
        "\n",
        "  plt.figure(figsize=(8, 4))\n",
        "  plt.plot(x_axis, losses)\n",
        "\n",
        "  # changing the title based on whether there are hidden layers\n",
        "  if hidden_layer_count == 0:\n",
        "    plt.title(\"Cross-entropy training loss for \" + str(hidden_layer_count) + \" hidden layers\")\n",
        "  else:\n",
        "    plt.title(\"Cross-entropy training loss for \" + str(hidden_layer_count) + \" hidden layer(s) with \" + activation_func)\n",
        "    \n",
        "  plt.xlabel(\"Epoch\")\n",
        "  plt.xticks(x_axis, map(str, x_axis))\n",
        "  plt.ylabel(\"Cross-entropy loss\")"
      ],
      "metadata": {
        "id": "m2_I_GRr8MzE"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_train_test_acc(train_accs, test_accs, hidden_layer_count, activation_func):\n",
        "  x_axis = np.arange(1, len(train_accs) + 1, dtype = int)\n",
        "\n",
        "  plt.figure(figsize=(8, 4))\n",
        "\n",
        "  plt.plot(x_axis, train_accs, label = \"Training accuracy\")\n",
        "  plt.plot(x_axis, test_accs, label = \"Testing accuracy\")\n",
        "\n",
        "  # changing the title based on whether there are hidden layers\n",
        "  if hidden_layer_count == 0:\n",
        "    plt.title(\"Training and testing accuracy for \" + str(hidden_layer_count) + \" hidden layers\")\n",
        "  else:\n",
        "    plt.title(\"Training and testing accuracy for \" + str(hidden_layer_count) + \" hidden layer(s) with \" + activation_func)\n",
        "    \n",
        "  plt.xlabel(\"Epoch\")\n",
        "  plt.xticks(x_axis, map(str, x_axis))\n",
        "  plt.ylabel(\"Classification accuracy\")\n",
        "  plt.legend()"
      ],
      "metadata": {
        "id": "8dJsc80n80sE"
      },
      "execution_count": 31,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def epoch_mini_batch(x_train, y_train, x_test, y_test, hidden_layers, hidden_units, activation_func, lr, batch_size, epochs, lambda_reg = 0, track_loss = False, track_acc = False):\n",
        "  n_features = x_train.shape[-1]\n",
        "  n_output = len(set(y_train))\n",
        "\n",
        "  # creates the mlp and optimizer objects\n",
        "  mlp = MLP(n_features, n_output, hidden_layers, hidden_units, activation_func)\n",
        "  opt = GradientDescentOptimizer(mlp, lr)\n",
        "\n",
        "  # saving the initial loss, training accuracy, and testing accuracy\n",
        "  initial_loss, initial_train_acc, initial_test_acc = mlp.evaluate_initial_metrics(x_train, x_test, y_train, y_test, lambda_reg)\n",
        "\n",
        "  # training the model using mini-batch times epochs\n",
        "  losses, train_accs, test_accs = mlp.fit_epoch_mini_batch(x_train, y_train, x_test, y_test, opt, batch_size, epochs, lambda_reg, track_acc)\n",
        "\n",
        "  #losses.insert(0, initial_loss)\n",
        "\n",
        "  # the number of hidden layers\n",
        "  hidden_layer_count = int((len(mlp.layers) - 2) / 2)\n",
        "\n",
        "  # plots the cross-entropy loss\n",
        "  if track_loss:\n",
        "    plot_losses(losses, hidden_layer_count, activation_func)\n",
        "    \n",
        "  # plots the training and testing accuracy\n",
        "  if track_acc:\n",
        "    plot_train_test_acc(train_accs, test_accs, hidden_layer_count, activation_func)\n",
        "\n",
        "  return mlp"
      ],
      "metadata": {
        "id": "YWxAE0Mzp7qP"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def evaluate_mlp_acc(mlp: MLP, x_train, y_train, x_test, y_test, silent = True):\n",
        "  train_predictions = mlp.predict(x_train)\n",
        "  test_predictions = mlp.predict(x_test)\n",
        "  \n",
        "  train_acc = evaluate_acc(train_predictions, y_train)\n",
        "  test_acc = evaluate_acc(test_predictions, y_test)\n",
        "  \n",
        "  if not silent:\n",
        "    print(\"The accuracy of the model on the training data: \" + str(round((train_acc * 100), 2)) + \"%\")\n",
        "    print(\"The accuracy of the model on the testing data: \" + str(round((test_acc * 100), 2)) + \"%\")\n",
        "    print(\"\\n\")\n",
        "\n",
        "  return train_acc, test_acc\n",
        "                     "
      ],
      "metadata": {
        "id": "_O6LbWx1tNtx"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## MLP"
      ],
      "metadata": {
        "id": "uVb_gMZBGdRo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Baseline accuracy tests\n",
        "\n"
      ],
      "metadata": {
        "id": "_Zi31RJC-Kmr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### plotting training and testing for 0 hidden layers (ReLU)\n",
        "\n",
        "mlp0_test = epoch_mini_batch(x_train, y_train, x_test, y_test, 0, [], \"ReLU\", 0.1, 1000, 20, track_acc = True)\n",
        "acc0_test = evaluate_mlp_acc(mlp0_test, x_train, y_train, x_test, y_test, silent = False)"
      ],
      "metadata": {
        "id": "V5fD_iA3Nirs",
        "outputId": "4df3c99c-934f-40d9-9beb-8025d019ec14",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        }
      },
      "execution_count": 34,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy of the model on the training data: 73.74%\n",
            "The accuracy of the model on the testing data: 73.14%\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### plotting loss for 0 hidden layers (ReLU)\n",
        "\n",
        "mlp0 = epoch_mini_batch(x_train, y_train, x_test, y_test, 0, [], \"ReLU\", 0.1, 1000, 20, track_loss = True)\n",
        "acc0 = evaluate_mlp_acc(mlp0, x_train, y_train, x_test, y_test, silent = False)"
      ],
      "metadata": {
        "id": "L81lECrRiXgs",
        "outputId": "a74a34e0-e3bc-414a-8be2-8b8cb05e0db5",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        }
      },
      "execution_count": 35,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy of the model on the training data: 73.35%\n",
            "The accuracy of the model on the testing data: 72.79%\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### plotting training and testing accuracy for 1 hidden layer (ReLU)\n",
        "\n",
        "mlp1_test = epoch_mini_batch(x_train, y_train, x_test, y_test, 1, [128], \"ReLU\", 0.1, 1000, 20, track_acc = True)\n",
        "acc1_test = evaluate_mlp_acc(mlp1_test, x_train, y_train, x_test, y_test, silent = False)"
      ],
      "metadata": {
        "id": "TJaxXO0Nlzah",
        "outputId": "bc48c8c1-063f-4197-e059-e091263bf9cd",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        }
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy of the model on the training data: 75.02%\n",
            "The accuracy of the model on the testing data: 74.22%\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### plotting loss for 1 hidden layer (ReLU)\n",
        "\n",
        "mlp1 = epoch_mini_batch(x_train, y_train, x_test, y_test, 1, [128], \"ReLU\", 0.1, 1000, 20, track_loss = True)\n",
        "acc1 = evaluate_mlp_acc(mlp1, x_train, y_train, x_test, y_test, silent = False)"
      ],
      "metadata": {
        "id": "VWe3uSE-phLm",
        "outputId": "1fcaa672-e4a5-4481-ba47-a40889f8c30a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        }
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "The accuracy of the model on the training data: 75.49%\n",
            "The accuracy of the model on the testing data: 74.79%\n",
            "\n",
            "\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 576x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### plotting training and testing accuracy for 2 hidden layers (ReLU)\n",
        "\n",
        "mlp2_test = epoch_mini_batch(x_train, y_train, x_test, y_test, 2, [128, 128], \"ReLU\", 0.1, 1000, 20, track_acc = True)\n",
        "acc2_test = evaluate_mlp_acc(mlp2_test, x_train, y_train, x_test, y_test, silent = False)"
      ],
      "metadata": {
        "id": "RwkmkB3Vq6yU",
        "outputId": "b2ef0f44-d5b8-4f4f-b12a-239c418d654d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        }
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-38-dfd84beb199a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m### plotting training and testing accuracy for 2 hidden layers (ReLU)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0mmlp2_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mepoch_mini_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;36m128\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m128\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"ReLU\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0macc2_test\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate_mlp_acc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmlp2_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msilent\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-32-e26744a40bc0>\u001b[0m in \u001b[0;36mepoch_mini_batch\u001b[0;34m(x_train, y_train, x_test, y_test, hidden_layers, hidden_units, activation_func, lr, batch_size, epochs, lambda_reg, track_loss, track_acc)\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m   \u001b[0;31m# training the model using mini-batch times epochs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m   \u001b[0mlosses\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_accs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_accs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mmlp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_epoch_mini_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mepochs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlambda_reg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack_acc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m   \u001b[0;31m#losses.insert(0, initial_loss)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-27-1742701bd1aa>\u001b[0m in \u001b[0;36mfit_epoch_mini_batch\u001b[0;34m(self, x_train, y_train, x_test, y_test, opt, batch_size, epochs, lambda_reg, track_acc)\u001b[0m\n\u001b[1;32m    140\u001b[0m       \u001b[0my_train_shuf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mindices\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    141\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 142\u001b[0;31m       \u001b[0mloss\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrain_acc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest_acc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit_mini_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train_shuf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train_shuf\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopt\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_size\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlambda_reg\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtrack_acc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    143\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    144\u001b[0m       \u001b[0;31m# taking the last loss, training accuracy, and testing accuracy values\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-27-1742701bd1aa>\u001b[0m in \u001b[0;36mfit_mini_batch\u001b[0;34m(self, x_train, y_train, x_test, y_test, opt, batch_size, lambda_reg, track_acc)\u001b[0m\n\u001b[1;32m    119\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mtrack_acc\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    120\u001b[0m       \u001b[0;31m# calculates the training and testing accuracy\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 121\u001b[0;31m       \u001b[0mtrain_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    122\u001b[0m       \u001b[0mtest_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    123\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-27-1742701bd1aa>\u001b[0m in \u001b[0;36mpredict\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m    185\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    186\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 187\u001b[0;31m     \u001b[0mpred_prob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    188\u001b[0m     \u001b[0mpredictions\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpred_prob\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mpredictions\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-27-1742701bd1aa>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     35\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     36\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mlayer\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 37\u001b[0;31m       \u001b[0mx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     38\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-22-e015e1418d38>\u001b[0m in \u001b[0;36mforward\u001b[0;34m(self, x)\u001b[0m\n\u001b[1;32m     16\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mforward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcur_input\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 18\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mw\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0mx\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqueeze\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mb\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### plotting loss for 2 hidden layers (ReLU)\n",
        "\n",
        "mlp2 = epoch_mini_batch(x_train, y_train, x_test, y_test, 1, [128], \"ReLU\", 0.1, 1000, 20, track_loss = True)\n",
        "acc2 = evaluate_mlp_acc(mlp2, x_train, y_train, x_test, y_test, silent = False)"
      ],
      "metadata": {
        "id": "oSRHQHOKry5o"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Testing activation functions other than ReLU"
      ],
      "metadata": {
        "id": "Xw646-_-vt2r"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### training and testing 2 hidden layers with Tanh activation functions\n",
        "\n",
        "mlp2t = epoch_mini_batch(x_train, y_train, x_test, y_test, 2, [128, 128], \"Tanh\", 0.1, 1000, 20, track_loss = True)\n",
        "acc2t = evaluate_mlp_acc(mlp2t, x_train, y_train, x_test, y_test, silent = False)"
      ],
      "metadata": {
        "id": "dx45R6rav2CT"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### training and testing 2 hidden layers with leaky ReLU activation functions\n",
        "\n",
        "mlp2l = epoch_mini_batch(x_train, y_train, x_test, y_test, 2, [128, 128], \"Leaky ReLU\", 0.1, 1000, 20, track_loss = True)\n",
        "acc2l = evaluate_mlp_acc(mlp2l, x_train, y_train, x_test, y_test, silent = False)"
      ],
      "metadata": {
        "id": "KNVMb42qwVBu"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Adding L2 regularization"
      ],
      "metadata": {
        "id": "lLEAhgccx8KV"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### training and testing 2 hidden layers with ReLU activation functions and L2 regularization\n",
        "\n",
        "mlp2reg = epoch_mini_batch(x_train, y_train, x_test, y_test, 2, [128, 128], \"ReLU\", 0.1, 1000, 20, track_loss = True, lambda_reg = 0.001)\n",
        "acc2reg = evaluate_mlp_acc(mlp2reg, x_train, y_train, x_test, y_test, silent = False)"
      ],
      "metadata": {
        "id": "iZ0Qy_T_yANL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Using a model trained on unnormalized images"
      ],
      "metadata": {
        "id": "AzPgdvMUdN95"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### training and testing 2 hidden layers with ReLu activation functions\n",
        "\n",
        "### faith - will fix this\n",
        "\n",
        "mlp2ln = epoch_mini_batch(x_train_unprocessed, y_train, x_test_unprocessed, y_test, 2, [128, 128], \"ReLU\", 0.1, 1000, 5, track_loss = True)\n",
        "acc2ln = evaluate_mlp_acc(mlp2ln, x_train_unprocessed, y_train, x_test_unprocessed, y_test, silent = False)"
      ],
      "metadata": {
        "id": "j9hqFKVAdQ8s"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Convnet"
      ],
      "metadata": {
        "id": "Tia8YS6kGkEW"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Temp (Gary make functions for the code below pls)"
      ],
      "metadata": {
        "id": "4Ij67vAqJJsE"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def convnetModel(optimizer, num_filters = 8, filter_size = 3, strides = 1, padding = 'valid', activation = 'relu', epochs = 3, batch_size = 60):\n",
        "  model = models.Sequential()\n",
        "  #we add 2 layers as mentionned in the pdf\n",
        "  #these 2 layers are the conv layers\n",
        "  #input shape is 3d because thats how keras library wants it\n",
        "  model.add(layers.Conv2D(filters = num_filters, kernel_size = filter_size, strides = strides,\n",
        "                         padding = padding, activation = activation, input_shape=(28,28,1)))\n",
        "  model.add(layers.Conv2D(filters = num_filters, kernel_size = filter_size, strides = strides,\n",
        "                         padding = padding, activation = activation))\n",
        "  model.add(layers.Flatten())\n",
        "\n",
        "  #what is this part?\n",
        "  #the first two layers are the fully connected layer, the number of hidden units is specified in the doc\n",
        "  #the last layer is to check how accurate the prediction is?\n",
        "  model.add(layers.Dense(128, activation = activation))\n",
        "  model.add(layers.Dense(128, activation = activation))\n",
        "  model.add(layers.Dense(10, activation = 'softmax'))\n",
        "\n",
        "  model.summary()\n",
        "\n",
        "  model.compile(optimizer=optimizer,\n",
        "              loss= 'categorical_crossentropy',\n",
        "              metrics=['accuracy'])\n",
        "\n",
        "  ### fitting the model\n",
        "\n",
        "\n",
        "  history = model.fit(\n",
        "    x = x_train_convnet,\n",
        "    y = y_train_convnet, \n",
        "    epochs=epochs,                # number of training epochs\n",
        "    batch_size=batch_size\n",
        "  )\n",
        "   \n",
        "  ### plotting accuracy\n",
        "\n",
        "  plt.plot(history.history['accuracy'])\n",
        "  plt.title('model accuracy')\n",
        "  plt.ylabel('accuracy')\n",
        "  plt.xlabel('epoch')\n",
        "  plt.legend(['train'], loc='upper left')\n",
        "  plt.show() \n",
        "\n",
        "  ### plotting loss\n",
        "\n",
        "  plt.plot(history.history['loss'])\n",
        "  plt.title('model loss')\n",
        "  plt.ylabel('loss')\n",
        "  plt.xlabel('epoch')\n",
        "  plt.legend(['train'], loc='upper left')\n",
        "  plt.show()\n"
      ],
      "metadata": {
        "id": "cfg2JwYEKTFv"
      },
      "execution_count": 58,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "optimizer = optimizers.SGD(lr=0.1, decay=0, momentum=0, nesterov=False)\n",
        "convnetModel(optimizer, num_filters = 8, filter_size = 3, strides = 1, padding = 'valid', activation = 'relu', epochs = 3, batch_size = 60)\n"
      ],
      "metadata": {
        "id": "e-hP-tDbiw-a"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "collapsed_sections": [
        "HQbCrZx0-EgM",
        "0rywH03KE_9-",
        "Xw646-_-vt2r",
        "lLEAhgccx8KV",
        "AzPgdvMUdN95"
      ],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}