{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/faithrts/COMP-551/blob/faith-branch-testing/trying%20to%20run%20code%20on%20mnist%20fashion%20data\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Set-up"
      ],
      "metadata": {
        "id": "8A1SE2icjh69"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "VCTCTWgB-NKG",
        "outputId": "c935a965-6962-4588-b2c2-3c7ef7c82f72",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "mkdir: cannot create directory ‘images’: File exists\n"
          ]
        }
      ],
      "source": [
        "### importing libraries and setting the random seed\n",
        "\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import sys\n",
        "\n",
        "%matplotlib notebook\n",
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.gridspec as gridspec\n",
        "#from matplotlib import cm\n",
        "\n",
        "import re\n",
        "import math\n",
        "from importlib import reload\n",
        "from typing import List\n",
        "from tqdm import tqdm\n",
        "from enum import Enum\n",
        "from numpy.random import RandomState\n",
        "\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "\n",
        "import warnings\n",
        "warnings.filterwarnings('ignore')\n",
        "\n",
        "np.random.seed(1234)\n",
        "random_state = RandomState(1234)\n",
        "\n",
        "# a folder to store the saved graphs\n",
        "!mkdir images"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Data Handling"
      ],
      "metadata": {
        "id": "hKHZWj9vjn1j"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Helper functions"
      ],
      "metadata": {
        "id": "MtAHDLEXj2T3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Loading and cleaning data"
      ],
      "metadata": {
        "id": "8rHPqW8GC1E6"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# assumes the last column of the dataframe is the labels\n",
        "def x_y_from_df(df):\n",
        "  x = df.iloc[:, :-1].to_numpy()\n",
        "  y = df.iloc[:, -1].to_numpy()\n",
        "\n",
        "  return x, y"
      ],
      "metadata": {
        "id": "2V6syl07WULR"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def center_array(arr):\n",
        "  mean = np.mean(arr)\n",
        "  return_arr = np.array(arr) - mean\n",
        "  # return_arr = [item - mean for item in arr]\n",
        "\n",
        "  return return_arr"
      ],
      "metadata": {
        "id": "vudEuApQoTk7"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def normalize_array(arr):\n",
        "  std = np.std(arr)\n",
        "  return_arr = np.array(arr) / std\n",
        "  # return_arr = [item / std for item in arr]\n",
        "\n",
        "  return return_arr"
      ],
      "metadata": {
        "id": "uWuzGFZrpHxK"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# pre-processes the df by performing mean subtraction and normalization\n",
        "def preprocess_df(df):\n",
        "  preprocessed_df = df.copy()\n",
        "\n",
        "  for col in preprocessed_df.iloc[:, :-1]:\n",
        "    preprocessed_col = normalize_array(center_array(df[col]))\n",
        "    preprocessed_df[col] = preprocessed_col\n",
        "\n",
        "  return preprocessed_df"
      ],
      "metadata": {
        "id": "9XtP7FZtn6mN"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "#### Plotting graphs"
      ],
      "metadata": {
        "id": "sx9mADR8DD8L"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "def plot_label_distributions(label_arr, dataset_name, labels = 0):\n",
        "  \n",
        "  # creates the plot\n",
        "  plt.figure(figsize = (10,4))\n",
        "  width = 0.6\n",
        "\n",
        "  unique_labels = list(set(label_arr))\n",
        "  counts = []\n",
        "\n",
        "  for label in unique_labels:\n",
        "    count = label_arr.count(label)\n",
        "    counts.append(count)\n",
        "\n",
        "  if labels == 0:\n",
        "    labels = [str(label) for label in unique_labels]\n",
        "\n",
        "  # the colour codes of the bars\n",
        "  colours = ['#001219', '#005f73', '#0a9396', '#94d2bd', '#e9d8a6',\n",
        "            '#ee9b00', '#ca6702', '#bb3e03', '#ae2012', '#9b2226']\n",
        "\n",
        "  plt.bar(labels, counts, width, color = colours)\n",
        "  plt.title(\"Distribution of Class Labels in \" + dataset_name + \" Dataset\")\n",
        "  plt.xlabel(\"Label\")\n",
        "  plt.ylabel(\"Count\")\n",
        "\n",
        "  for index, value in enumerate(counts):\n",
        "    plt.text(index - 0.24, value + 5, str(round(value, 2)))\n",
        "\n",
        "  plt.show()"
      ],
      "metadata": {
        "id": "G-UXPNHRww-f"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Importing"
      ],
      "metadata": {
        "id": "FsaKjKTqjylr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# clones the github repo\n",
        "!git clone https://github.com/zalandoresearch/fashion-mnist\n",
        "sys.path.insert(1, 'fashion-mnist/utils')\n",
        "\n",
        "# imports the mnist reader from the repo\n",
        "import mnist_reader"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JDX1OBJ7jUl8",
        "outputId": "03769c53-8690-4acf-8588-7a53c9644c08"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "fatal: destination path 'fashion-mnist' already exists and is not an empty directory.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Loading and cleaning data"
      ],
      "metadata": {
        "id": "HQbCrZx0-EgM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "### loading the data using the github repo's mnist_reader.load_mnist\n",
        "\n",
        "labels = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n",
        "          'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n",
        "\n",
        "# training data\n",
        "x_train_temp, y_train = mnist_reader.load_mnist('fashion-mnist/data/fashion', kind = 'train')\n",
        "\n",
        "# testing data\n",
        "x_test_temp, y_test = mnist_reader.load_mnist('fashion-mnist/data/fashion', kind = 't10k')"
      ],
      "metadata": {
        "id": "kZITIsTPkA3M"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### creating dataframes to better understand data\n",
        "\n",
        "# training dataframe\n",
        "train_temp_df = pd.DataFrame(x_train_temp)\n",
        "train_temp_df['LABEL'] = y_train\n",
        "\n",
        "# testing dataframe\n",
        "test_temp_df = pd.DataFrame(x_test_temp)\n",
        "test_temp_df['LABEL'] = y_test"
      ],
      "metadata": {
        "id": "PgtXdMOXkxwK"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_temp_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 468
        },
        "id": "ZkQzG8t8l5xp",
        "outputId": "dd636ece-a83b-4f2e-8e25-91c49ccbf637"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       0  1  2  3  4  5  6  7   8   9  ...  775  776  777  778  779  780  781  \\\n",
              "0      0  0  0  0  0  0  0  0   0   0  ...    0    0    0    0    0    0    0   \n",
              "1      0  0  0  0  0  1  0  0   0   0  ...  114  130   76    0    0    0    0   \n",
              "2      0  0  0  0  0  0  0  0   0  22  ...    0    1    0    0    0    0    0   \n",
              "3      0  0  0  0  0  0  0  0  33  96  ...    0    0    0    0    0    0    0   \n",
              "4      0  0  0  0  0  0  0  0   0   0  ...    0    0    0    0    0    0    0   \n",
              "...   .. .. .. .. .. .. .. ..  ..  ..  ...  ...  ...  ...  ...  ...  ...  ...   \n",
              "59995  0  0  0  0  0  0  0  0   0   0  ...    0    0    0    0    0    0    0   \n",
              "59996  0  0  0  0  0  0  0  0   0   0  ...    0    0    0    0    0    0    0   \n",
              "59997  0  0  0  0  0  0  0  0   0   5  ...    0    0    0    0    0    0    0   \n",
              "59998  0  0  0  0  0  0  0  0   0   0  ...   54   50    5    0    1    0    0   \n",
              "59999  0  0  0  0  0  0  0  0   0   0  ...    0    0    0    0    0    0    0   \n",
              "\n",
              "       782  783  LABEL  \n",
              "0        0    0      9  \n",
              "1        0    0      0  \n",
              "2        0    0      0  \n",
              "3        0    0      3  \n",
              "4        0    0      0  \n",
              "...    ...  ...    ...  \n",
              "59995    0    0      5  \n",
              "59996    0    0      1  \n",
              "59997    0    0      3  \n",
              "59998    0    0      0  \n",
              "59999    0    0      5  \n",
              "\n",
              "[60000 rows x 785 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c06aff74-af19-4d9d-a047-593b26008d0b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>775</th>\n",
              "      <th>776</th>\n",
              "      <th>777</th>\n",
              "      <th>778</th>\n",
              "      <th>779</th>\n",
              "      <th>780</th>\n",
              "      <th>781</th>\n",
              "      <th>782</th>\n",
              "      <th>783</th>\n",
              "      <th>LABEL</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>114</td>\n",
              "      <td>130</td>\n",
              "      <td>76</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>22</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>33</td>\n",
              "      <td>96</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59995</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59996</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59997</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59998</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>54</td>\n",
              "      <td>50</td>\n",
              "      <td>5</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59999</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>60000 rows × 785 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c06aff74-af19-4d9d-a047-593b26008d0b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-c06aff74-af19-4d9d-a047-593b26008d0b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-c06aff74-af19-4d9d-a047-593b26008d0b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### centering and normalizing the data\n",
        "\n",
        "# pre-processing each dataframe\n",
        "train_df = preprocess_df(train_temp_df)\n",
        "test_df = preprocess_df(test_temp_df)\n",
        "\n",
        "# extracting arrays for x_train, y_train, x_test, y_test\n",
        "x_train, y_train = x_y_from_df(train_df)\n",
        "x_test, y_test = x_y_from_df(test_df)"
      ],
      "metadata": {
        "id": "aCWhRpennWnd"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "train_df"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 488
        },
        "id": "_S73o8ans37S",
        "outputId": "7dac8558-ff61-430e-9c4b-e4449e9c5339"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "              0         1         2         3         4         5         6  \\\n",
              "0     -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "1     -0.008644 -0.023223 -0.039178 -0.041322 -0.057646  0.100437 -0.098878   \n",
              "2     -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "3     -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "4     -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "...         ...       ...       ...       ...       ...       ...       ...   \n",
              "59995 -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "59996 -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "59997 -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "59998 -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "59999 -0.008644 -0.023223 -0.039178 -0.041322 -0.057646 -0.071167 -0.098878   \n",
              "\n",
              "              7         8         9  ...       775       776       777  \\\n",
              "0     -0.156653 -0.239080 -0.377827  ... -0.474798 -0.394260 -0.406094   \n",
              "1     -0.156653 -0.239080 -0.377827  ...  1.857395  2.697741  1.324682   \n",
              "2     -0.156653 -0.239080  0.198023  ... -0.474798 -0.370475 -0.406094   \n",
              "3     -0.156653  1.145393  2.134974  ... -0.474798 -0.394260 -0.406094   \n",
              "4     -0.156653 -0.239080 -0.377827  ... -0.474798 -0.394260 -0.406094   \n",
              "...         ...       ...       ...  ...       ...       ...       ...   \n",
              "59995 -0.156653 -0.239080 -0.377827  ... -0.474798 -0.394260 -0.406094   \n",
              "59996 -0.156653 -0.239080 -0.377827  ... -0.474798 -0.394260 -0.406094   \n",
              "59997 -0.156653 -0.239080 -0.246952  ... -0.474798 -0.394260 -0.406094   \n",
              "59998 -0.156653 -0.239080 -0.377827  ...  0.629925  0.794971 -0.292227   \n",
              "59999 -0.156653 -0.239080 -0.377827  ... -0.474798 -0.394260 -0.406094   \n",
              "\n",
              "            778       779       780       781       782       783  LABEL  \n",
              "0     -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      9  \n",
              "1     -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      0  \n",
              "2     -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      0  \n",
              "3     -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      3  \n",
              "4     -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      0  \n",
              "...         ...       ...       ...       ...       ...       ...    ...  \n",
              "59995 -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      5  \n",
              "59996 -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      1  \n",
              "59997 -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      3  \n",
              "59998 -0.441358 -0.374489 -0.288156 -0.156811 -0.089673 -0.034147      0  \n",
              "59999 -0.441358 -0.396626 -0.288156 -0.156811 -0.089673 -0.034147      5  \n",
              "\n",
              "[60000 rows x 785 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e75ea51b-cc6d-4639-9198-1933161fad42\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>775</th>\n",
              "      <th>776</th>\n",
              "      <th>777</th>\n",
              "      <th>778</th>\n",
              "      <th>779</th>\n",
              "      <th>780</th>\n",
              "      <th>781</th>\n",
              "      <th>782</th>\n",
              "      <th>783</th>\n",
              "      <th>LABEL</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>9</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>0.100437</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>1.857395</td>\n",
              "      <td>2.697741</td>\n",
              "      <td>1.324682</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>0.198023</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.370475</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>1.145393</td>\n",
              "      <td>2.134974</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59995</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59996</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59997</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.246952</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59998</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>0.629925</td>\n",
              "      <td>0.794971</td>\n",
              "      <td>-0.292227</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.374489</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>59999</th>\n",
              "      <td>-0.008644</td>\n",
              "      <td>-0.023223</td>\n",
              "      <td>-0.039178</td>\n",
              "      <td>-0.041322</td>\n",
              "      <td>-0.057646</td>\n",
              "      <td>-0.071167</td>\n",
              "      <td>-0.098878</td>\n",
              "      <td>-0.156653</td>\n",
              "      <td>-0.239080</td>\n",
              "      <td>-0.377827</td>\n",
              "      <td>...</td>\n",
              "      <td>-0.474798</td>\n",
              "      <td>-0.394260</td>\n",
              "      <td>-0.406094</td>\n",
              "      <td>-0.441358</td>\n",
              "      <td>-0.396626</td>\n",
              "      <td>-0.288156</td>\n",
              "      <td>-0.156811</td>\n",
              "      <td>-0.089673</td>\n",
              "      <td>-0.034147</td>\n",
              "      <td>5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>60000 rows × 785 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e75ea51b-cc6d-4639-9198-1933161fad42')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-e75ea51b-cc6d-4639-9198-1933161fad42 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-e75ea51b-cc6d-4639-9198-1933161fad42');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# plotting label distributions for training data\n",
        "plot_label_distributions(train_df['LABEL'].tolist(), 'MNIST Fashion (train)', labels)"
      ],
      "metadata": {
        "id": "7Z1sA2Iu0MYp",
        "outputId": "a8602fc3-863c-467e-b54e-927dbc8f0460",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmoAAAEWCAYAAADW2rtYAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAAgAElEQVR4nO3debxVVf3/8dc7cUoUHBARUFAxNTMHnMrSNMdS6hs5ZImmkWP1rbQ5p/xqc1+znP2KpjmVP80hRRzKwgHBeUhSSQYBuRcTp0Q+vz/WOrC5nHPvuXDOvZvr+/l43MfdZ+21117r7Olz1l77HEUEZmZmZlY+7+nuCpiZmZlZdQ7UzMzMzErKgZqZmZlZSTlQMzMzMyspB2pmZmZmJeVAzczMzKykHKhZt5N0nqQfNKisDSTNk7RCfn23pKMaUXYu71ZJoxpVXifW+yNJL0t6aSmXf0HSxxtdr0aStJukqV25bCP3vXeD9vYjSR+R9EwT1/03Sds0sLy66ytpK0l/b9S6zTrDgZo1VT6xvyHpVUlzJf1d0tGSFu57EXF0RJxeZ1ntBhsR8a+I6B0R7zSg7qdI+l2b8veNiDHLWnYn67EB8A1gi4hYr0aeNST9StK/cqD6z/x6na6sa67L4ZLu7er1Lo16971q8oeAkPTBNunX5/Td8utT8usDC3l65bQh+fWlkn5UmH+kpKfzcTNT0i2SVs8fFOblv7cl/afw+rwqdTxc0juFPPMknbM07e1IRPw1It7XjLIl7Q+8GhGT8usljs3O6kx9I+JRYG6uR6063i3pzbzN/i3pIUnflrRyvXXK+8Qm9eZfWl21HmsMB2rWFfaPiNWBDYGzgG8BFzd6JZJ6NbrMktgAmBMRs6rNlLQSMA54P7APsAawMzAH2KGrKvku9Q/gsMoLSWuT3vvZbfK1AKdWenrbI2lX4H+AQ/JxszlwNSz8oNA7InoDVwA/qbyOiKNrFDm+kKd3RBzf2UaWwNHA5fVmVtLo69sVwJc7yHN83mYDSB+uDgZukaQG18XeRRyoWZeJiFci4kbgIGCUpC1h8d4ESetIuin3vrVI+quk90i6nBSw/Cn3CpwkaUj+ZHikpH8BdxbSikHbxpIeyJ9yb5C0Vl7XErfLKr12kvYBvgsclNf3SJ6/8FZqrtf3JU2RNEvSZZL65HmVeozKvVwvS/perfdGUp+8/Oxc3vdz+R8HxgLr53pcWmXxw/J78+mIeDIiFkTErIg4PSJuqbKuHSSNz+/xDEnn5GCvcoH7ZW7PvyU9VthO+0l6MvcYTJP0zfa3eNV2HiHpqVzGc5KWuPBJ+m5+v16QdGghfWVJP8vv50yl25ar1ljPt3IdX5X0jKQ9auQr7nu7SZoq6Ru5/TMkHdFBk64g7SOVAOwQ4HrgP23y/Tmnfb6D8gC2JwVXkwAioiUixkTEq3UsW5f2tkOtY7Cw+NaSHpX0iqSrJa2Sl1vseJK0eT5e5kp6QtIBhXmXSvqNpJtzHe6XtHGNuq4E7A7ck1+3d2yeIelvwOvARh20s219X5D0zWpty+4G9lAdPWQR8VpE3A0cQArcP5HX0d6x95e8+CO5XQdJWjNvi9mSWvP0oEKdD8/telXS822Oly/mtrdKuk3ShrXW01F7rHs5ULMuFxEPAFOBj1SZ/Y08rx/Qn3RCjoj4AvAvUu9c74j4SWGZXUm9DnvXWOVhwBdJn3LnA2fXUcc/k3o1rs7r+2CVbIfnv48BGwG9gba3lXYB3gfsAfxQ0uY1VvlroE8uZ9dc5yMi4g5gX2B6rsfhVZb9OPDniJjXUbuyd4D/BtYhXUT2AI7N8/YCPgpsmutzIKlnDlIv6Jdzj8GWwJ11rq9oFvBJUq/fEcAvJW1bmL9ertdAYBRwgaTK7amzcr22BjbJeX7YdgU5//HA9rmuewMv1Fm/9UjtHggcCfxG0prt5J8OPEl63yBtt8uq5AvgB8DJklbsoA73A3tLOlXSh+sJDJZCe9uh6jFYWPZAUs/tUGAr0jGwmNzGPwG3A+sCJwBXFLYlpN6mU4E1gcnAGTXqOgxYEBFTocNj8wvAaGB1YEoH7aymZtsiYhrwNul4rktE/AuYwKJzXc1jLyI+mvN8MLfratI1+v9IdyM2AN4gn2MkrUY6l+2b9/MPAQ/neSNI2+2/SNvxr8Dv21mPlZgDNesu04G1qqS/TQqoNoyIt/M4ko5+kPaU/An2jRrzL4+IxyPiNdLF8kDVcQuqDocCv4iI53KQ9B3gYC3em3dqRLwREY8AjwBLBHy5LgcD34mIVyPiBeDnpItOPdYGZtRb6Yh4KCLui4j5eV3nk4JDSO//6sBmgCLiqYiYUZi3haQ1IqI1IibWu87Cum+OiH9Gcg/pQt42YP9BRLyV599M2l4iXYD/O/cwvUq6WB9cZTXvACvnuq4YES9ExD/rrOLbwGl537sFmEfHF+bLgMMkbQb0jYjx1TLl3uTZQLsPt0TEX0kX2G1J7Z8j6RfLsM/ulHtwKn87dbAdOjoGz46I6RHRQgrGtq62TtIHl7Mi4j8RcSdwE6nHseL6iHggIuaTeiarlQPQF6i3N/HSiHgi79tv17m/FXXUtldzfTpj4bmug2NvCRExJyL+EBGv533+jDb5FwBbSlo1ImZExBM5/WjgzHz8zicdK1tXetVs+eJAzbrLQNK4nbZ+Svp0fXvu0v92HWW92In5U4AVSZ9ol9X6ubxi2b1IvRAVxac0XyddvNpaJ9epbVkD66zHHNKFtS6SNs23UF6S9G/SSXwdgHxBPQf4DTBL0gWS1siLfgbYD5gi6R5JO9e7zsK695V0X76lNjeXV9wWrTmgrphCep/7Ae8FHqoEHKTbif3ariMiJgNfA07JbbhK0vp1VnFOvrBV1NpmRX8k3Zo7no7HUX0f+B6wSnuZIuLWiNifdIEfQerZWdqnl++LiL6Fv/s62A4dHYP17NPrAy9GxIJCWtt9up5yAFpJHx7qsdi5oI79ra2O6rQ6MLfOulQsPNe1d+xVI+m9ks5XGg7xb+AvQF9JK+Tj5CBSUDYj30beLC+6IfC/hWOlBRD1n1OsRByoWZeTtD3phLHEk4G5R+kbEbERaXzH17VofFGtnrWOetwGF6Y3IPUYvAy8Rrr4V+q1Aotf+DsqdzrphFgsez4ws4Pl2no516ltWdPqXP4O0q2y1erMfy7wNDAsItYg3SJZONg5Is6OiO2ALUi3Gk/M6Q9GxAjSraz/B1xT5/qANMYM+APwM6B/RPQFbimuG1izTTs2IL3PL5Nu+7y/EHD0iTSofgkRcWVE7EJ6TwP4cWfq2hkR8TpwK3AMHQRqETGWFAQd216+Qv4FETGOdJt5y2WsKtDxdujgGKzXdGCwFh/b1pl9umhyqraKQUaH54I697e65fWvBNT9FSSSBgPbkW49QgfHXhXfIPXo7pjzV25bVrbVbRGxJ+mD2tPAhXn+i6RhCsUAfdWI8FeMLIccqFmXUfoKiU8CVwG/i4jHquT5pKRN8q2uV0i3sSqfymeSxnB11uclbSHpvcBpwHWRvr7jH8Aqkj6Rx9R8n3TLrGImMES1nx77PfDfkoZK6s2icTPza+SvKtflGuAMpa9g2BD4OlDv1w9cTjox/0HSZkoPIaytNCh/vyr5Vwf+DczLn8CPqcyQtL2kHfP78RrwJrBA0kqSDpXUJyLezssvqFJ2oSitUvwjXeRWJt3+my9pXxaN7So6Na/vI6TxRdfmnpkLSWOM1s0rGChpiXGJkt4nafd8oX6TFOC1V9dG+C6wa76d1ZHvASfVmilphKSDlQaSS9IOpNtd9zWmqu1vhw6OwXrdT+qROknSikpfVbI/6djvlIj4D+nDSPGWX0fHJtS/v9VrV+DOiHiro4y5J2xX4AbgAVKACO0ce1nbc9zqpP13rtJDUCcX1tE/7yurAW+RbtNXttN5wHckvT/n7SPps+2sx0rMgZp1hT9JepUUTHwP+AVpYG81w0gn5XnAeOC3EXFXnncm8P3cnd+ZJw4vBy4l3dZYBfgKpKdQST0bF5E+6b9GGkRdcW3+P0dStfFYl+Sy/wI8TwoKTuhEvYpOyOt/jtTTeGUuv0P5wvFx0ifqsaQLwQOkWyr3V1nkm8DnSONtLiR/9UO2Rk5rJd2qmkO6FQZpzNwL+RbM0aQxerV8iHSBafv3FVJQ2prrcGOb5V7K86aTxi0dHRFP53nfIvWu3JfrcAfVx4+tTHrw4OVc3rqk8YNNk8c11fXdcRHxN9L2qaUV+BLwLGlb/g74aURcscwVTet/lfa3Q3vHYL3r+A8pMNuXtB1+CxxW2JaddT6Lj9ns6Nisp52ddSgpAGrPOflcNxP4FalHb5/CLeD2jj1It+vH5HPcgbmMVUnv4X2k2/0V7yF9oJtOurW5Kznwi4jrSb3IV+Vj5XHStqi1HisxRYfjtM3MzLqX0tduHB/5a0u6eN1bAedHRKfHZZotKwdqZmZmZiXlW59mZmZmJeVAzczMzKykHKiZmZmZlVSP/BHrddZZJ4YMGdLd1TAzMzPr0EMPPfRyRCzxBd7QQwO1IUOGMGHChO6uhpmZmVmHJE2pNc+3Ps3MzMxKyoFag82dO5eRI0ey2WabsfnmmzN+/HhaWlrYc889GTZsGHvuuSetra0ARARf+cpX2GSTTdhqq62YOHHR9zaOGTOGYcOGMWzYMMaMGdNdzelx7QG3yW3qPm5T+dvU09oDbtPy0qaaIqLH/W233XbRXQ477LC48MILIyLirbfeitbW1jjxxBPjzDPPjIiIM888M0466aSIiLj55ptjn332iQULFsT48eNjhx12iIiIOXPmxNChQ2POnDnR0tISQ4cOjZaWFrenQdwmt6m7uE3lb1NPa0+E27Q8tAmYEDVimm4Pqprx112B2ty5c2PIkCGxYMGCxdI33XTTmD59ekRETJ8+PTbddNOIiBg9enRceeWVS+S78sorY/To0QvT2+brKj2tPRFuU4Tb5DY1Tk9rU09rT4TbFLF8tKm9QM23Phvo+eefp1+/fhxxxBFss802HHXUUbz22mvMnDmTAQMGALDeeusxc+ZMAKZNm8bgwYMXLj9o0CCmTZtWM72r9bT2gNsEbpPb1Dg9rU09rT3gNsHy0ab2OFBroPnz5zNx4kSOOeYYJk2axGqrrcZZZ521WB5JSOqmGnZOT2sPuE3LC7dp+dDT2tTT2gNuU0/Q1EBNUl9J10l6WtJTknaWtJaksZKezf/XzHkl6WxJkyU9KmnbQjmjcv5nJY1qZp2XxaBBgxg0aBA77rgjACNHjmTixIn079+fGTNmADBjxgzWXXddAAYOHMiLL764cPmpU6cycODAmuldrae1B9wmcJvcpsbpaW3qae0BtwmWjza1p9k9av8L/DkiNgM+CDwFfBsYFxHDgHH5NcC+wLD8Nxo4F0DSWsDJwI7ADsDJleCubNZbbz0GDx7MM888A8C4cePYYostOOCAAxY+TTJmzBhGjBgBwAEHHMBll11GRHDffffRp08fBgwYwN57783tt99Oa2srra2t3H777ey9995uj9vkNrlNbpPb4zb1wDa1q9bgtWX9A/oAzwNqk/4MMCBPDwCeydPnA4e0zQccApxfSF8sX7W/7nzqc9KkSbHddtvFBz7wgRgxYkS0tLTEyy+/HLvvvntssskmsccee8ScOXMiImLBggVx7LHHxkYbbRRbbrllPPjggwvLufjii2PjjTeOjTfeOC655JLuak6Pa0+E2+Q2dR+3qfxt6mntiXCbloc20c7DBErzG0/S1sAFwJOk3rSHgK8C0yKib84joDUi+kq6CTgrIu7N88YB3wJ2A1aJiB/l9B8Ab0TEz9qsbzSpJ44NNthguylTan7Jb+PauPb6TV9HLTFnelPK1eHfbEq59YhLf9Zxpk5a7ZxzG15mZ7x2/DENL/M3j93Z8DI747gP7N7wMmc98/uGl9kZ677vkIaX2XpR946PWfOoxp/bHzx6hYaXWa/tz3unKeXesWv3/UDPx++Z3/Ayrx+6dsPL7IxPPz+n4WVetPH7Gl5mZxz1z2eavg5JD0XE8GrzmnnrsxewLXBuRGwDvMai25wA5CiyIWeTiLggIoZHxPB+/ar+XJaZmZnZcqWZgdpUYGpE3J9fX0cK3GZKGgCQ/8/K86cBgwvLD8pptdLNzMzMerSmBWoR8RLwoqRKn+UepNugNwKVJzdHATfk6RuBw/LTnzsBr0TEDOA2YC9Ja+aHCPbKaWZmZmY9WrNvzp8AXCFpJeA54AhScHiNpCOBKcCBOe8twH7AZOD1nJeIaJF0OvBgzndaRLQ0ud5mZmZm3a6pgVpEPAxUGxy3R5W8ARxXo5xLgEsaWzszMzOzcvMvE5iZmZmVlAM1MzMzs5JyoGZmZmZWUg7UzMzMzErKgZqZmZlZSTlQMzMzMyspB2pmZmZmJeVAzczMzKykHKiZmZmZlZQDNTMzM7OScqBmZmZmVlIO1MzMzMxKyoGamZmZWUk5UDMzMzMrKQdqZmZmZiXlQM3MzMyspByomZmZmZWUAzUzMzOzknKgZmZmZlZSDtTMzMzMSsqBmpmZmVlJOVAzMzMzKykHamZmZmYl5UDNzMzMrKQcqJmZmZmVVFMDNUkvSHpM0sOSJuS0tSSNlfRs/r9mTpeksyVNlvSopG0L5YzK+Z+VNKqZdTYzMzMri67oUftYRGwdEcPz628D4yJiGDAuvwbYFxiW/0YD50IK7ICTgR2BHYCTK8GdmZmZWU/WHbc+RwBj8vQY4FOF9MsiuQ/oK2kAsDcwNiJaIqIVGAvs09WVNjMzM+tqzQ7UArhd0kOSRue0/hExI0+/BPTP0wOBFwvLTs1ptdIXI2m0pAmSJsyePbuRbTAzMzPrFr2aXP4uETFN0rrAWElPF2dGREiKRqwoIi4ALgAYPnx4Q8o0MzMz605N7VGLiGn5/yzgetIYs5n5lib5/6ycfRowuLD4oJxWK93MzMysR2taoCZpNUmrV6aBvYDHgRuBypObo4Ab8vSNwGH56c+dgFfyLdLbgL0krZkfItgrp5mZmZn1aM289dkfuF5SZT1XRsSfJT0IXCPpSGAKcGDOfwuwHzAZeB04AiAiWiSdDjyY850WES1NrLeZmZlZKTQtUIuI54APVkmfA+xRJT2A42qUdQlwSaPraGZmZlZm/mUCMzMzs5JyoGZmZmZWUg7UzMzMzErKgZqZmZlZSTlQMzMzMyspB2pmZmZmJeVAzczMzKykHKiZmZmZlZQDNTMzM7OScqBmZmZmVlIO1MzMzMxKyoGamZmZWUk5UDMzMzMrKQdqZmZmZiXlQM3MzMyspByomZmZmZWUAzUzMzOzknKgZmZmZlZSDtTMzMzMSsqBmpmZmVlJOVAzMzMzKykHamZmZmYl5UDNzMzMrKQcqJmZmZmVlAM1MzMzs5JyoGZmZmZWUk0P1CStIGmSpJvy66GS7pc0WdLVklbK6Svn15Pz/CGFMr6T05+RtHez62xmZmZWBl3Ro/ZV4KnC6x8Dv4yITYBW4MicfiTQmtN/mfMhaQvgYOD9wD7AbyWt0AX1NjMzM+tWTQ3UJA0CPgFclF8L2B24LmcZA3wqT4/Ir8nz98j5RwBXRcRbEfE8MBnYoZn1NjMzMyuDZveo/Qo4CViQX68NzI2I+fn1VGBgnh4IvAiQ57+S8y9Mr7LMQpJGS5ogacLs2bMb3Q4zMzOzLte0QE3SJ4FZEfFQs9ZRFBEXRMTwiBjer1+/rlilmZmZWVP1amLZHwYOkLQfsAqwBvC/QF9JvXKv2SBgWs4/DRgMTJXUC+gDzCmkVxSXMTMzM+uxmtajFhHfiYhBETGE9DDAnRFxKHAXMDJnGwXckKdvzK/J8++MiMjpB+enQocCw4AHmlVvMzMzs7JoZo9aLd8CrpL0I2AScHFOvxi4XNJkoIUU3BERT0i6BngSmA8cFxHvdH21zczMzLpWlwRqEXE3cHeefo4qT21GxJvAZ2ssfwZwRvNqaGZmZlY+/mUCMzMzs5JyoGZmZmZWUg7UzMzMzErKgZqZmZlZSTlQMzMzMyspB2pmZmZmJeVAzczMzKykHKiZmZmZlZQDNTMzM7OScqBmZmZmVlIO1MzMzMxKqq5ATdKH60kzMzMzs8apt0ft13WmmZmZmVmD9GpvpqSdgQ8B/SR9vTBrDWCFZlbMzMzM7N2u3UANWAnonfOtXkj/NzCyWZUyMzMzsw4CtYi4B7hH0qURMaWL6mRmZmZmdNyjVrGypAuAIcVlImL3ZlTKzMzMzOoP1K4FzgMuAt5pXnXMzMzMrKLeQG1+RJzb1JqYmZmZ2WLq/XqOP0k6VtIASWtV/ppaMzMzM7N3uXp71Ebl/ycW0gLYqLHVMTMzM7OKugK1iBja7IqYmZmZ2eLqCtQkHVYtPSIua2x1zMzMzKyi3luf2xemVwH2ACYCDtTMzMzMmqTeW58nFF9L6gtc1ZQamZmZmRlQ/1Ofbb0GtDtuTdIqkh6Q9IikJySdmtOHSrpf0mRJV0taKaevnF9PzvOHFMr6Tk5/RtLeS1lnMzMzs+VKvWPU/kR6yhPSj7FvDlzTwWJvAbtHxDxJKwL3SroV+Drwy4i4StJ5wJHAufl/a0RsIulg4MfAQZK2AA4G3g+sD9whadOI8BfvmpmZWY9W7xi1nxWm5wNTImJqewtERADz8ssV818AuwOfy+ljgFNIgdqIPA1wHXCOJOX0qyLiLeB5SZOBHYDxddbdzMzMbLlU163P/OPsTwOrA2sC/6lnOUkrSHoYmAWMBf4JzI2I+TnLVGBgnh4IvJjXNx94BVi7mF5lmeK6RkuaIGnC7Nmz66memZmZWanVFahJOhB4APgscCBwv6SRHS0XEe9ExNbAIFIv2GbLUNeO1nVBRAyPiOH9+vVr1mrMzMzMuky9tz6/B2wfEbMAJPUD7iDdouxQRMyVdBewM9BXUq/cazYImJazTQMGA1Ml9QL6AHMK6RXFZczMzMx6rHqf+nxPJUjL5nS0rKR++Ws8kLQqsCfwFHAXUOmNGwXckKdvZNFPVY0E7szj3G4EDs5PhQ4FhpF698zMzMx6tHp71P4s6Tbg9/n1QcAtHSwzABgjaQVSUHdNRNwk6UngKkk/AiYBF+f8FwOX54cFWkhPehIRT0i6BniS9CDDcX7i08zMzN4N2g3UJG0C9I+IEyX9F7BLnjUeuKK9ZSPiUWCbKunPkcartU1/kzQGrlpZZwBntLc+MzMzs56mox61XwHfAYiIPwJ/BJD0gTxv/6bWzszMzOxdrKMxav0j4rG2iTltSFNqZGZmZmZAx4Fa33bmrdrIipiZmZnZ4joK1CZI+lLbRElHAQ81p0pmZmZmBh2PUfsacL2kQ1kUmA0HVgI+3cyKmZmZmb3btRuoRcRM4EOSPgZsmZNvjog7m14zMzMzs3e5ur5HLSLuIn1RrZmZmZl1kXp/mcDMzMzMupgDNTMzM7OScqBmZmZmVlIO1MzMzMxKyoGamZmZWUk5UDMzMzMrKQdqZmZmZiXlQM3MzMyspByomZmZmZWUAzUzMzOzknKgZmZmZlZSDtTMzMzMSsqBmpmZmVlJOVAzMzMzKykHamZmZmYl5UDNzMzMrKQcqJmZmZmVlAM1MzMzs5JyoGZmZmZWUk0L1CQNlnSXpCclPSHpqzl9LUljJT2b/6+Z0yXpbEmTJT0qadtCWaNy/mcljWpWnc3MzMzKpJk9avOBb0TEFsBOwHGStgC+DYyLiGHAuPwaYF9gWP4bDZwLKbADTgZ2BHYATq4Ed2ZmZmY9WdMCtYiYERET8/SrwFPAQGAEMCZnGwN8Kk+PAC6L5D6gr6QBwN7A2IhoiYhWYCywT7PqbWZmZlYWXTJGTdIQYBvgfqB/RMzIs14C+ufpgcCLhcWm5rRa6W3XMVrSBEkTZs+e3dD6m5mZmXWHpgdqknoDfwC+FhH/Ls6LiACiEeuJiAsiYnhEDO/Xr18jijQzMzPrVk0N1CStSArSroiIP+bkmfmWJvn/rJw+DRhcWHxQTquVbmZmZtajNfOpTwEXA09FxC8Ks24EKk9ujgJuKKQflp/+3Al4Jd8ivQ3YS9Ka+SGCvXKamZmZWY/Wq4llfxj4AvCYpIdz2neBs4BrJB0JTAEOzPNuAfYDJgOvA0cARESLpNOBB3O+0yKipYn1NjMzMyuFpgVqEXEvoBqz96iSP4DjapR1CXBJ42pnZmZmVn7+ZQIzMzOzknKgZmZmZlZSDtTMzMzMSsqBmpmZmVlJOVAzMzMzKykHamZmZmYl5UDNzMzMrKQcqJmZmZmVlAM1MzMzs5JyoGZmZmZWUg7UzMzMzErKgZqZmZlZSTlQMzMzMyspB2pmZmZmJeVAzczMzKykHKiZmZmZlZQDNTMzM7OScqBmZmZmVlIO1MzMzMxKyoGamZmZWUk5UDMzMzMrKQdqZmZmZiXlQM3MzMyspByomZmZmZWUAzUzMzOzkmpaoCbpEkmzJD1eSFtL0lhJz+b/a+Z0STpb0mRJj0ratrDMqJz/WUmjmlVfMzMzs7JpZo/apcA+bdK+DYyLiGHAuPwaYF9gWP4bDZwLKbADTgZ2BHYATq4Ed2ZmZmY9XdMCtYj4C9DSJnkEMCZPjwE+VUi/LJL7gL6SBgB7A2MjoiUiWoGxLBn8mZmZmfVIXT1GrX9EzMjTLwH98/RA4MVCvqk5rVb6EiSNljRB0oTZs2c3ttZmZmZm3aDbHiaIiACigeVdEBHDI2J4v379GlWsmZmZWbfp6kBtZr6lSf4/K6dPAwYX8g3KabXSzczMzHq8rg7UbgQqT26OAm4opB+Wn/7cCXgl3yK9DdhL0pr5IYK9cpqZmZlZj9erWQVL+j2wG7COpKmkpzfPAq6RdCQwBTgwZ78F2A+YDLwOHAEQES2STgcezPlOi4i2DyiYmZmZ9UhNC9Qi4pAas/aokjeA42qUcwlwSQOrZmZmZrZc8C8TmJmZmZWUAzUzMzOzknKgZmZmZlZSDtTMzMzMSsqBmpmZmVlJOVAzMzMzKykHamZmZmYl5UDNzMzMrKQcqJmZmZmVlAM1MzMzs5JyoGZmZmZWUg7UzMzMzErKgZqZmZlZSQbNW1MAAA6oSURBVDlQMzMzMyspB2pmZmZmJeVAzczMzKykHKiZmZmZlZQDNTMzM7OScqBmZmZmVlIO1MzMzMxKyoGamZmZWUk5UDMzMzMrKQdqZmZmZiXlQM3MzMyspByomZmZmZWUAzUzMzOzklpuAjVJ+0h6RtJkSd/u7vqYmZmZNdtyEahJWgH4DbAvsAVwiKQturdWZmZmZs21XARqwA7A5Ih4LiL+A1wFjOjmOpmZmZk1lSKiu+vQIUkjgX0i4qj8+gvAjhFxfCHPaGB0fvk+4Jkur2jnrQO83N2VaKCe1h5wm5YXbtPyoae1qae1B9ym7rJhRPSrNqNXV9ekWSLiAuCC7q5HZ0iaEBHDu7sejdLT2gNu0/LCbVo+9LQ29bT2gNtURsvLrc9pwODC60E5zczMzKzHWl4CtQeBYZKGSloJOBi4sZvrZGZmZtZUy8Wtz4iYL+l44DZgBeCSiHiim6vVCMvVrdo69LT2gNu0vHCblg89rU09rT3gNpXOcvEwgZmZmdm70fJy69PMzMzsXceBmpmZmVlJOVCrQtLakh7Ofy9JmlZ4vVI7yw2R9HiNeadJ+niNeYdLWr9N2sGSvidpN0kfWrYWtW9p21tWkt7JdX9c0rWS3ttB/rslDc/TL0hap2tquuwKbX1C0iOSviGpxxzXktaTdJWkf0p6SNItkjbtZBl9JR3brDq2s97v5e3yaN5GOzagzIX76rLkaaRq7ax1HEk6oNZPAHbFua6wroZvm0LZu0m6qVHlNVrhnPGIpIld9Z63U59PSQpJm9WZv9a+Na+T6+1U/nbKWeL63WjLxcMEXS0i5gBbA0g6BZgXET9bxjJ/WC09/zzW4cDjwPTCrH2Bs4H9gXnA35dl/R3Urd32SuoVEfObtf62JK0QEe8sQxFvRESlPVcARwO/aEjlloEkkcaFLmhgscW2rgtcCawBnNxm3V26DRshv1/XA2Mi4uCc9kGgP/CPThTVFzgW+G3DK1mDpJ2BTwLbRsRb+cKy3H3o6Uhn2xkRN1LliX1JvYDdaPK5Lq+rtNumi47T4jljb+BMYNcmr7M9hwD35v8nd5C3jA5nyet3Q/WYT95dTdL7JT2QP5k8KmlYnrWCpAvzp7XbJa2a81+q9AsLlU8EP5Y0kbRzDgeuyGWtmi9QWwMtpCDjv/O8j+ReuzvzOsdJ2qBQ/nmSJkj6h6RPLmP7KuXdD/xE0taS7svrvV7SmjlfsTdqHUkvtPf+SPp8If38HKgiaZ6kn0t6BNh5Werexl+BTdp+ypV0jqTDO3gPvq7UK/e4pK/ltLMkHVfIc4qkb+bpEyU9mNt7ak4bIukZSZeRDubB1dbVCBExi/TrHMcrOVzSjZLuBMZJWk3SJfn9nyRpRK7jEtsq5705f+p+XNJBzap3Oz4GvB0R5xXa+Ahwr6Sf5no9VqmbpN75mJiY0ys/M3cWsHFu30+7qO4DgJcj4q1c75cjYrqkH+Z95HFJF+RjvXIc/Thvh39I+khOX1WpR/EpSdcDq1ZWIOncfLw/UdnfukHVduZ5JxS2xWa5zodLOidPF88x19DmXNfVdc7n5VOr1LnWcTNE0l9z/qo9U5K2z8tsLGk7Sfco9QzfJmlAznO3pF9JmgB8tYntrmYNoDXXo9bxg6Qf5PPYvZJ+XznnLStJvYFdgCNJX7tVSd8tvy/XSXpa0hWVY6WQZ1VJt0r6UpVylzgX11j/L/PxM05Sv5xW61q3RLrSNX2x63cj3pclRIT/2vkDTgG+WSX918CheXol0gl0CDAf2DqnXwN8Pk9fCozM0y8AJxXKuhsYXni9LXBZtfUDfwJG5ekvAv+vUP6fScH3MGAqsMrStjeXdxOwQk5/FNg1T58G/Kpt3Uk/0/FCO+/P5rn+K+b03wKH5ekADmzQNpuX//cCbgCOIX1av6mQ5xzg8CpteCG3YzvgMWA1oDfwBLBN/runUM6TpOBrL9Ij4Mrb4Cbgo3mfWADs1KT9c16VtLmkXqfD836wVk7/n8L+2JfUK7VajW31GeDCQpl9uuHY+wrwyyrpnwHGkr6qpz/wL9LFtxewRmFfnJy3xxDg8S6ue2/g4fwe/7Zw7KxVyHM5sH9hH/x5nt4PuCNPf530dUQAW5HOL8OLZeX34W5gq7b7cze28wXghDx9LHBRnj4cOCdPX8ri55hTqHKuLUGdax037yWfY0nn3Al5erfcrg8BDwEbACuSegr75TwHFbbr3cBvu3DffCe3/2ngFWC7nF7r+Nk+518FWB14tlHbCTgUuDhP/71Ql91y3QaRzqfjgV0K22kIcAf5+pHTK+f9qufiKusOFp33fljYL2td6zq8Bjbrzz1qS2888F1J3yL9RtcbOf35iHg4Tz9E2qGqubqdsvcBbq0xb2fS7S1IJ/pdCvOuiYgFEfEs8BxQ1z3/dlwbEe9I6gP0jYh7cvoYUhDSnmrvzx6kAOhBSQ/n1xvl/O8Af1jG+lasmsufQLqIX7wUZewCXB8Rr0XEPOCPwEciYhKwrqT1lW7DtUbEi6STw17AJGAi6b2v9LJOiYj7lq1JS21sRLTk6b2Ab+f35m7SiXcDqm+rx4A9cy/PRyLilW6oey27AL+PiHciYiZwD+liIuB/JD1KOokPJAVyXS7vM9uRejhnA1cr9eB+TNL9kh4DdgfeX1jsj/l/8bzxUeB3ucxHSReLigOVeuUn5XK2aEpj2tFOO6F6e9q6NpZtmEOnLUWdax03KwIX5m15LYu//5uTgoX9I+JfpN+f3hIYm8v5PikIqWjvetBob0TE1hGxGelac1nurap1/HwYuCEi3oyIV0kfthvlEOCqPH1Vfl3xQERMjTRU5GEW34duAP4vIi6rUmZ75+KiBSx6338H7FLrWreU18CG8Ri1Okn6NIvunx8VEVfmLvtPALdI+jIpOHqrsNg7FG5VtPFaO6vbi9Rr0FltvxRvWb8kr706Vsxn0S30VRauuPr7I9J4o+9UKefNBp6wF47BqJBUrOdidV0K1wIjgfVYdKALODMizm+z3iHU9z42hKSNSPvdrJxUXLeAz0TEM20We6rttoqIOyVtS+rd+ZGkcRFxWrPr38YTpPe5XocC/Uifyt9Wug2/LNt5meT9+W7g7nwx/zKpV2x4RLyoNB60WL/KueMdOjg3SxpK6vnePiJaJV1KN7W1SjtH5Vn1tKfLjo2iTta56nGTt99M4IOkc8ubhdkzSNtjG9LYJQFPREStYR3d9T6MVxqj1490rHfZ8SNpLdKHlQ9IClLPcEg6MWdpey0t7kN/A/aRdGXkbq1i0VQ5F9ehtF8q6x61OkXE9flTyNYRMSFfEJ+LiLNJ0f1Wy1D8q6QuZXLk3ivSAP/F5mV/Z9G9/ENJY7AqPivpPZI2JvVUtb0gL5Xcm9JaGDfyBVIvBqRu6O3y9MKLao33ZxwwUmnQO5LWkrRhI+pYhynAFpJWltSX1JvXnr8Cn5L0XkmrAZ9m0Xt9NWkbjCQFbZB+NeOLecwFkgZW2tlV8hiL80hd+NVOOreRxg1VxkVtk/8vsa2UnmJ6PSJ+B/yUdDu+q90JrCxpdCVB0lakW7sHSVoht/mjwANAH2BWvsh8DKjsW22PoaaT9D4tGrcKacxp5Xh8Oe8n9QShfwE+l8vckkXnmTVIF/dXJPUnPXzU5Wq0c8pSFtcl22kp6lz1uCHtbzNyj88XSIFGxVzSB58zJe1G2vb9lB5kQNKKkoq9qd1CaRzeCsAcah8/fwP2l7RK3m+XafxzwUjg8ojYMCKGRMRg4HmgnvGJPySNrftNlXn1novfw6Jj8HPAvbWudR1cA5u+37pHbekdCHxB0tvAS6RxDGssZVmXAudJegP4OanbueJPwHVKAztPyH//lz91zAaOKOT9F+mCtQZwdEQUP+Etq1G5ju8l9RxW1vsz4Jp8Mb25kH+J9yciWiR9H7hd6Ssk3gaOY+lP7HXLPRjXkAb0P0/qFm8v/8TcS/FATroo3/YkIp6QtDowLSJm5LTbJW0OjM/n83nA50mfBJupcpt3RVLv5uXUfsL1dOBXwKP5/X+edNKtti9vD/xU0gLSdjqmqa2oIiIi92T/Kt+WfZP0weBrpHFGj5A+BZ8UES8pPeH7p9xDMoE0BoeImCPpb0pfnXNrRJxYZXWN1hv4df5QMJ803mc06QL+OOl9frCOcs4lHe9PAU+RbskREY9ImkRq44uki2l3qNXOpbmYL3aui4i/drTAUupsnWsdN78F/iDpMNL44MV6xSJiptJDXbeSxhOPBM6ufBjPZXbHTyFWzhmQep9G5SEutY6fByXdSLrtPpM0LKIRQyEOAX7cJu0POb2eW8FfBS6R9JOIOKmS2M65eFab5V8DdsjXpFmkcYNQ+1pXK/1SFl2/dy4Mg2oY/4RUyUi6iBQUdGpMUw4qboqI65pSMTMze1eS1Dsi5uUg5S/A6IiY2N31erdwj1rJRMRR3V0HMzOzggskbUEaszbGQVrXco+amZmZWUn5YQIzMzOzknKgZmZmZlZSDtTMzMzMSsqBmpm9a0ma14m8C3/XtRnlm5lV40DNzMzMrKQcqJmZFUjaX+n3OCdJuiN/83/FByWNl/SspC8VljlR0oOSHpV0ajdU28x6KAdqZmaLuxfYKSK2If1Q9EmFeVuRfp9wZ+CHktaXtBfpR593IP0c0XaSuuwHm82sZ/MX3pqZLW4QcLWkAcBKpJ8Mqrgh/0TMG5LuIgVnuwB7sehnyXqTAre/dF2VzayncqBmZra4XwO/iIgb8w9qn1KY1/YbwoP0e4lnRsT5XVM9M3s38a1PM7PF9QGm5elRbeaNkLSKpLWB3Ug/rH4b8EVJvQEkDZS0bldV1sx6Nveomdm72XslTS28/gWpB+1aSa3AncDQwvxHgbuAdYDTI2I6MF3S5sB4SQDzgM8Ds5pffTPr6fxbn2ZmZmYl5VufZmZmZiXlQM3MzMyspByomZmZmZWUAzUzMzOzknKgZmZmZlZSDtTMzMzMSsqBmpmZmVlJ/X8oWsesGBUk8wAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# plotting label distributions for testing data\n",
        "plot_label_distributions(test_df['LABEL'].tolist(), 'MNIST Fashion (test)', labels)"
      ],
      "metadata": {
        "id": "5uB2ZBXO2E2q",
        "outputId": "0c94412f-31ae-4d42-92b9-b94e078a597d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 295
        }
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 720x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Implementing models"
      ],
      "metadata": {
        "id": "a6lVueablnwe"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Helper functions"
      ],
      "metadata": {
        "id": "U_WEPKULlIU2"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## MLP"
      ],
      "metadata": {
        "id": "-7B0imbhlxBQ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "class NeuralNetLayer:\n",
        "    def __init__(self):\n",
        "        self.gradient = None\n",
        "        self.parameters = None\n",
        "        \n",
        "    def forward(self, x):\n",
        "        raise NotImplementedError\n",
        "\n",
        "    def backward(self, gradient):\n",
        "        raise NotImplementedError"
      ],
      "metadata": {
        "id": "6G7qW7K8kaeL"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class LinearLayer(NeuralNetLayer):\n",
        "    def __init__(self, input_size, output_size):\n",
        "        super().__init__()\n",
        "        self.ni = input_size\n",
        "        self.no = output_size\n",
        "        self.w = random_state.randn(output_size, input_size)\n",
        "        self.b = random_state.randn(output_size)\n",
        "        self.cur_input = None\n",
        "        self.parameters = [self.w, self.b]\n",
        "\n",
        "    def forward(self, x):\n",
        "        self.cur_input = x\n",
        "        return (self.w[None, :, :] @ x[:, :, None]).squeeze() + self.b\n",
        "\n",
        "    def backward(self, gradient):\n",
        "        print(gradient)\n",
        "        print(self.cur_input)\n",
        "\n",
        "        assert self.cur_input is not None, \"Must call forward before backward\"\n",
        "        #dw = gradient.dot(self.cur_input)\n",
        "        dw = gradient[:, :, None] @ self.cur_input[:, None, :]\n",
        "        db = gradient\n",
        "        self.gradient = [dw, db]\n",
        "        return gradient.dot(self.w)"
      ],
      "metadata": {
        "id": "fLT6hDvqlnWn"
      },
      "execution_count": 77,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class ReLULayer(NeuralNetLayer):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        \n",
        "    def forward(self, x):\n",
        "        self.gradient = np.where(x > 0, 1.0, 0.0)\n",
        "        return np.maximum(0, x)\n",
        "\n",
        "    def backward(self, gradient):\n",
        "        assert self.gradient is not None, \"Must call forward before backward\"\n",
        "        return gradient * self.gradient"
      ],
      "metadata": {
        "id": "nh2uqaBzltSL"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class LeakyReLULayer(NeuralNetLayer):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        \n",
        "    def forward(self, x):\n",
        "        self.gradient = np.where(x > 0, 1.0, 0.01)\n",
        "\n",
        "        activated_x = [float(element) if element > 0 else float(element) * 0.01 for element in x]\n",
        "        return activated_x\n",
        "\n",
        "    def backward(self, gradient):\n",
        "        assert self.gradient is not None, \"Must call forward before backward\"\n",
        "        return gradient * self.gradient"
      ],
      "metadata": {
        "id": "dXZNK6cj0OpR"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class TanhLayer(NeuralNetLayer):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        \n",
        "    def forward(self, x):\n",
        "        self.gradient = [1 - element ** 2 for element in x]\n",
        "\n",
        "        activated_x = np.tanh(x)\n",
        "        return activated_x\n",
        "\n",
        "    def backward(self, gradient):\n",
        "        assert self.gradient is not None, \"Must call forward before backward\"\n",
        "        return gradient * self.gradient"
      ],
      "metadata": {
        "id": "_Q3WODEGvX9T"
      },
      "execution_count": 19,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class SoftmaxOutputLayer(NeuralNetLayer):\n",
        "    def __init__(self):\n",
        "        super().__init__()\n",
        "        self.cur_probs = None\n",
        "\n",
        "    def forward(self, x):\n",
        "        exps = np.exp(x)\n",
        "        probs = exps / np.sum(exps, axis=-1)[:, None]\n",
        "        self.cur_probs = probs\n",
        "        return probs\n",
        "\n",
        "    def backward(self, target):\n",
        "        predictions = np.argmax(self.cur_probs, axis = -1)\n",
        "\n",
        "        assert predictions is not None, \"Must call forward before backward\"\n",
        "        return predictions - target"
      ],
      "metadata": {
        "id": "H5KJfNG-l3Vq"
      },
      "execution_count": 75,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class LayerName(Enum):\n",
        "    RELU = 1\n",
        "    TANH = 2\n",
        "    LEAKYRELU = 3"
      ],
      "metadata": {
        "id": "WIp5D1y-jAH9"
      },
      "execution_count": 21,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class MLP:\n",
        "    def __init__(self, n_features, n_output, hidden_layers = 0, hidden_units = [0], activation_func: LayerName = \"None\"):\n",
        "        layers_list = []\n",
        "\n",
        "        # adds the input layer\n",
        "        if hidden_layers == 0:\n",
        "          layers_list.append(LinearLayer(n_features, n_output))\n",
        "        else:\n",
        "          layers_list.append(LinearLayer(n_features, hidden_units[0]))\n",
        "\n",
        "        # adds the hidden layers\n",
        "        for i in range(hidden_layers):\n",
        "\n",
        "          # adding activation function layers\n",
        "          if LayerName == LayerName.RELU:\n",
        "            layers_list.append(ReLULayer())\n",
        "          elif LayerName == LayerName.TANH:\n",
        "            layers_list.append(TanhLayer())\n",
        "          elif LayerName == LayerName.LEAKYRELU:\n",
        "            layers_list.append(LeakyReLULayer())\n",
        "\n",
        "          # if this is the last hidden layer, it outputs the output size\n",
        "          if i == hidden_layers - 1:\n",
        "            layers_list.append(LinearLayer(hidden_units[i], n_output))\n",
        "            continue\n",
        "          \n",
        "          # if this is not the last hidden layer, it outputs the hidden size\n",
        "          layers_list.append(LinearLayer(hidden_units[i], hidden_units[i + 1]))\n",
        "          \n",
        "        # adds the output layer\n",
        "        layers_list.append(SoftmaxOutputLayer())\n",
        "\n",
        "        self.layers = layers_list\n",
        "\n",
        "    def forward(self, x):\n",
        "        for layer in self.layers:\n",
        "            x = layer.forward(x)\n",
        "        return x\n",
        "\n",
        "    def backward(self, target):\n",
        "        for layer in self.layers[::-1]:\n",
        "            target = layer.backward(target)"
      ],
      "metadata": {
        "id": "rnVxRvpFmGO4"
      },
      "execution_count": 22,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Optimizer:\n",
        "    def __init__(self, net: MLP):\n",
        "        self.net = net\n",
        "\n",
        "    def step(self):\n",
        "        for layer in self.net.layers[::-1]:\n",
        "            if layer.parameters is not None:\n",
        "                self.update(layer.parameters, layer.gradient)\n",
        "\n",
        "    def update(self, params, gradient):\n",
        "        raise NotImplementedError\n",
        "\n",
        "class GradientDescentOptimizer(Optimizer):\n",
        "    def __init__(self, net: MLP, lr: float):\n",
        "        super().__init__(net)\n",
        "        self.lr = lr\n",
        "\n",
        "    def update(self, params, gradient):\n",
        "        for (p, g) in zip(params, gradient):\n",
        "            p -= self.lr * g.mean(axis=0)"
      ],
      "metadata": {
        "id": "E9d9aLMlmQ1o"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Running experiments"
      ],
      "metadata": {
        "id": "IlELJSq3nWUz"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Helper functions"
      ],
      "metadata": {
        "id": "0rywH03KE_9-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_train.shape"
      ],
      "metadata": {
        "id": "i9IKdIu30iq2",
        "outputId": "378274a2-dc17-481d-a716-a38ac5703524",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(60000, 784)"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def train(mlp: MLP, optimizer: Optimizer, data_x, data_y, steps):\n",
        "    labels_count = len(set(data_y))\n",
        "    \n",
        "    losses = []\n",
        "    labels = np.eye(labels_count)[np.array(data_y)]\n",
        "\n",
        "    for _ in range(steps):\n",
        "        ###\n",
        "        indices = random_state.choice(len(data_x), int(len(data_x)/1000))\n",
        "        batch = data_x[indices]\n",
        "        batch_labels = data_y[indices]\n",
        "        ###\n",
        "\n",
        "        prob_predictions = mlp.forward(batch)\n",
        "        predictions = np.argmax(prob_predictions, axis = -1)\n",
        "\n",
        "        loss = -(batch_labels * np.log(predictions)).sum(axis=-1).mean()\n",
        "        losses.append(loss)\n",
        "        mlp.backward(batch_labels)\n",
        "        optimizer.step()\n",
        "\n",
        "    plt.plot(losses)\n",
        "    plt.xlabel(\"Epoch\")\n",
        "    plt.ylabel(\"Cross entropy loss\")"
      ],
      "metadata": {
        "id": "UnNqk1TUmZ9I"
      },
      "execution_count": 71,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr = [[1, 2], [4, 2], [4, 10]]"
      ],
      "metadata": {
        "id": "k9zzg5bv2sYO"
      },
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "arr = [[-2.41444940, -1.59413873, -3.07537057, -4.58351904, -2.02617695, -5.41477945, -2.33560310, -1.24832159, 0.00000000e+00, -1.12143860e+02],[-1.97970828, -2.69949131, -5.95380135, -3.83202363, -1.70450814, 0.00000000, -4.11415244, -4.61290483, -1.64808735, -4.58187616]]"
      ],
      "metadata": {
        "id": "ynmFGFxG36ZR"
      },
      "execution_count": 64,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test = np.argmax(arr, axis = -1)"
      ],
      "metadata": {
        "id": "63k0xi2i2xDp"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "test"
      ],
      "metadata": {
        "id": "58vcPq9p2z0M",
        "outputId": "f3241af1-4821-4733-a569-e184e618c5b5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([8, 5])"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Testing (will take out in final version)"
      ],
      "metadata": {
        "id": "_Zi31RJC-Kmr"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn import datasets\n",
        "dataset = datasets.load_iris()\n",
        "x, y = dataset['data'][:,[1,2]], dataset['target']\n",
        "\n",
        "n_features = x.shape[-1]"
      ],
      "metadata": {
        "id": "fdX1iEoT5hBO"
      },
      "execution_count": 25,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "### testing 1 hidden layer\n",
        "\n",
        "n_features = x_train.shape[-1]\n",
        "n_output = len(set(y_train))\n",
        "\n",
        "mlp1 = MLP(n_features, n_output, 1, [32], \"RELU\")\n",
        "opt1 = GradientDescentOptimizer(mlp1, 1e-1)\n",
        "\n",
        "train(mlp1, opt1, x_train, y_train, 200)"
      ],
      "metadata": {
        "id": "Ke5sO3gVvC29",
        "outputId": "c9fa61b3-ad0f-4e66-be83-9488c34d2b5b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 639
        }
      },
      "execution_count": 78,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[-7  7  4  5 -3 -5  1  2 -3 -6  5 -2  3 -1  5  2  0  2  7 -5 -1  3  7  2\n",
            " -2 -7  4 -2  6  3 -5 -6 -5 -5 -4  5  5  7  3  2  0  0 -3 -3  6 -4 -1 -2\n",
            " -2  3 -5 -2  2  1  3 -1  2 -2 -2 -1]\n",
            "[[ 16.08145039  25.39132217   6.73666793 ...  38.80000978  26.11198318\n",
            "   24.84198601]\n",
            " [-18.17285805 -10.354588    11.42441792 ...   7.97792921   1.30631902\n",
            "    8.85284559]\n",
            " [-30.41104384   1.95457123  -3.07943216 ...  -2.31621719  14.549769\n",
            "  -13.42782346]\n",
            " ...\n",
            " [ 19.59420641 -38.54187491  24.60083294 ... -20.66616651 -39.7066601\n",
            "   16.56353943]\n",
            " [ 11.27441513  14.08790769  27.9881942  ... -20.95285168 -22.41439729\n",
            "  -16.77120997]\n",
            " [ -5.34890547  -5.34617142  28.11803896 ... -15.57495484  -1.52529119\n",
            "  -26.41745142]]\n"
          ]
        },
        {
          "output_type": "error",
          "ename": "IndexError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mIndexError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-78-6fdf77fc70b9>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mopt1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGradientDescentOptimizer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmlp1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1e-1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0mtrain\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmlp1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mopt1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mx_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m200\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-71-f13eba0181a8>\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(mlp, optimizer, data_x, data_y, steps)\u001b[0m\n\u001b[1;32m     17\u001b[0m         \u001b[0mloss\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_labels\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlog\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictions\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msum\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m         \u001b[0mlosses\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mloss\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m         \u001b[0mmlp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m         \u001b[0moptimizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m<ipython-input-22-e65226969f4c>\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self, target)\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mlayer\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlayers\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m             \u001b[0mtarget\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlayer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbackward\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m<ipython-input-77-1c929502269a>\u001b[0m in \u001b[0;36mbackward\u001b[0;34m(self, gradient)\u001b[0m\n\u001b[1;32m     19\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcur_input\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"Must call forward before backward\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m         \u001b[0;31m#dw = gradient.dot(self.cur_input)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m         \u001b[0mdw\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m@\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcur_input\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m         \u001b[0mdb\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgradient\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgradient\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mdw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdb\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mIndexError\u001b[0m: too many indices for array: array is 1-dimensional, but 2 were indexed"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### testing 1 hidden layer\n",
        "\n",
        "mlp1 = MLP(n_features, 3, 1, [32], \"RELU\")\n",
        "opt1 = GradientDescentOptimizer(mlp1, 1e-1)\n",
        "\n",
        "train(mlp1, opt1, x, y, 200)"
      ],
      "metadata": {
        "id": "9lH1kbm95w86",
        "outputId": "907d3a40-8395-46eb-9ff7-133139eb8934",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### testing 2 hidden layers\n",
        "\n",
        "mlp2 = MLP(n_features, 3, 2, [32, 32], \"RELU\")\n",
        "opt2 = GradientDescentOptimizer(mlp2, 1e-2)\n",
        "\n",
        "train(mlp2, opt2, x, y, 200)"
      ],
      "metadata": {
        "id": "4QwkQJa7-T6j",
        "outputId": "ca03c20c-79d0-4203-86f2-b7b783560137",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "execution_count": 27,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "### testing no hidden layers\n",
        "\n",
        "mlp0 = MLP(n_features, 3)\n",
        "opt0 = GradientDescentOptimizer(mlp0, 1e-2)\n",
        "\n",
        "train(mlp0, opt0, x, y, 200)"
      ],
      "metadata": {
        "id": "vI8OskA16W5F",
        "outputId": "3b908c05-d053-4ebb-ef93-166929dd812e",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 279
        }
      },
      "execution_count": 28,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}